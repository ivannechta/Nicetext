head	1.10;
access;
symbols;
locks; strict;
comment	@ * @;


1.10
date	97.03.05.17.47.51;	author markc;	state Exp;
branches;
next	1.9;

1.9
date	97.02.16.06.58.59;	author markc;	state Exp;
branches;
next	1.8;

1.8
date	96.01.13.12.00.33;	author markc;	state Exp;
branches;
next	1.7;

1.7
date	96.01.13.10.18.10;	author markc;	state Exp;
branches;
next	1.6;

1.6
date	96.01.12.23.48.19;	author markc;	state Exp;
branches;
next	1.5;

1.5
date	96.01.10.22.15.49;	author markc;	state Exp;
branches;
next	1.4;

1.4
date	96.01.10.20.41.59;	author markc;	state Exp;
branches;
next	1.3;

1.3
date	96.01.08.22.12.17;	author markc;	state Exp;
branches;
next	1.2;

1.2
date	96.01.08.21.54.52;	author markc;	state Exp;
branches;
next	1.1;

1.1
date	96.01.08.17.32.22;	author markc;	state Exp;
branches;
next	;


desc
@initial check in
@


1.10
log
@Added static char rcsid []  = "@@(#)$Id$";
@
text
@%{
/*
 * YACC Grammar for inputting BABBLE Grammars 
 * Copyright (c) Mark T. Chapman 1995
 *
 * $Id: yaccgram.y,v 1.9 1997/02/16 06:58:59 markc Exp markc $
 *
 * $Log: yaccgram.y,v $
 * Revision 1.9  1997/02/16 06:58:59  markc
 * BST replaced with RBT
 *
 * Revision 1.8  1996/01/13 12:00:33  markc
 * added punctuation processing to grammar definition language using {}
 *
 * Revision 1.7  1996/01/13  10:18:10  markc
 * use new sentnode enabled sentence models
 *
 * Revision 1.6  1996/01/12  23:48:19  markc
 * dynamic grammars work system wide -- next step, constant expressions
 *
 * Revision 1.5  1996/01/10  22:15:49  markc
 * makeModel() works
 *
 * Revision 1.4  1996/01/10  20:41:59  markc
 * correctly parses and sets up grammar rules -- does not yet makeModel()
 *
 * Revision 1.3  1996/01/08  22:12:17  markc
 * Modified language to only allow weights at the end of a RHS set
 *
 * Revision 1.2  1996/01/08  21:54:52  markc
 * parses the grammar definition language correctly -- but with not meaning!
 *
 * Revision 1.1  1996/01/08  17:32:22  markc
 * Initial revision
 *
 *
 */

static char rcsid []  = "@@(#)$Id$";

int yyerror(char *);
int yylex();
#include <iostream.h>
#include <fstream.h>
#include <stdio.h>
#include <stdlib.h>
#include "../../mtc++/include/MTC++.h"
#include "../../mtc++/include/mstring.h"
#include "../../mtc++/include/errormsg.h"
#include "../../mtc++/include/list.h"
#include "../../mtc++/include/rbt.h"
#include "../../mtc++/include/raof.h"
#include "../../mtc++/include/raof2rbt.h"
#include "../../gendict/include/sentnode.h"
#include "../../gendict/include/sentmdl.h"
#include "../../gendict/include/typerec.h"
#include "../include/rule.h"
#include "../include/grammar.h"

#ifdef DEBUG_YACC_VERBOSE
#define D(x) x
#else
#define D(x) 
#endif // DEBUG_YACC_VERBOSE

extern MTCgrammar *yGram;
extern long lexline;
unsigned long saveWeight=1;

%}

%union {
	char *string;
	unsigned long  number;
}

%token <string> TOKEN
%token <string> PUNCT
%token <number> WEIGHT
%token <number> BAD

%%

grammar: 
		rule { D(cerr << "rule inserted to grammar" << endl;) };
	| 	grammar rule { D(cerr << "rule appended to grammar" << endl;)};
	;

rule: 
		TOKEN ':' rhs ';' 
		{	
			D( cerr << "Rule completed:" << $1 << endl;) 
			if (yGram->commitRule($1)==FALSE)
			{
				errorMsg(EMT_ERROR, "I could not commit a rule", "yyparse()");
			}
			free($1); 
		};
	;

rhs:
		rhsTokens		
		{ 
			D(cerr << "rhsTokens completed: " << endl;) 
			yGram->commitRHSSet(saveWeight);
		};

	|	weightedRhsTokens	
		{
			D(cerr << "weightedRhsTokens completed: " << endl;) 
			yGram->commitRHSSet(saveWeight);
		};

	|	rhs '|' rhsTokens	
		{	
			D(cerr << "rhs|rhstokens" << endl;) 
			yGram->commitRHSSet(saveWeight);
		};

	|	rhs '|' weightedRhsTokens	
		{ 
			D(cerr <<  "rhs|weightedRhsTokens" << endl;) 
			yGram->commitRHSSet(saveWeight);
		};
	;

rhsTokens:
		TOKEN 
		{
			D(cerr << "token: " << $1 << endl;) 

			if (yGram->appendRHS($1)==FALSE)
			{
				errorMsg(EMT_WARNING, "I could not append a RHS rule", "yyparse()");
			}

			free($1);
			saveWeight=1;
		}

	|	PUNCT 
		{
			D(cerr << "punctuation:" << $1 << ':' <<  endl;) 

			if (yGram->appendRHS($1, TRUE)==FALSE)
			{
				errorMsg(EMT_WARNING, "I could not append a RHS rule", "yyparse()");
			}

			free($1);
			saveWeight=1;
		}

	|	rhsTokens TOKEN	
		{
			D(cerr << "token: " << $2 << endl;)
			if (yGram->appendRHS($2)==FALSE)
			{
				errorMsg(EMT_WARNING, "I could not append a RHS rule", "yyparse()");
			}
			free($2);
			saveWeight=1;
		};

	|	rhsTokens PUNCT	
		{
			D(cerr << "punctuation:" << $2 << ':' << endl;)
			if (yGram->appendRHS($2, TRUE)==FALSE)
			{
				errorMsg(EMT_WARNING, "I could not append a RHS rule", "yyparse()");
			}
			free($2);
			saveWeight=1;
		};
	;

weightedRhsTokens:
		rhsTokens WEIGHT 
		{
			D(cerr << "weight: " << $2 << endl;) 
			saveWeight=$2;
		};
	;
%%

int yyerror(char *s)
{
	char buffer[1024];

	sprintf(buffer, "Syntax Error on line # %d of %s", lexline, yGram->getFileName().c_str());

	errorMsg(EMT_ABORT, buffer, "yyerror()");
}
@


1.9
log
@BST replaced with RBT
@
text
@d6 1
a6 1
 * $Id: yaccgram.y,v 1.8 1996/01/13 12:00:33 markc Exp markc $
d9 3
d38 2
@


1.8
log
@added punctuation processing to grammar definition language using {}
@
text
@d6 1
a6 1
 * $Id: yaccgram.y,v 1.7 1996/01/13 10:18:10 markc Exp markc $
d9 3
d46 1
a46 1
#include "../../mtc++/include/bst.h"
d48 1
a48 1
#include "../../mtc++/include/raof2bst.h"
@


1.7
log
@use new sentnode enabled sentence models
@
text
@d6 1
a6 1
 * $Id: yaccgram.y,v 1.6 1996/01/12 23:48:19 markc Exp markc $
d9 3
d70 1
d133 13
d150 11
@


1.6
log
@dynamic grammars work system wide -- next step, constant expressions
@
text
@d6 1
a6 1
 * $Id: yaccgram.y,v 1.5 1996/01/10 22:15:49 markc Exp markc $
d9 3
d43 1
@


1.5
log
@makeModel() works
@
text
@d6 1
a6 1
 * $Id: yaccgram.y,v 1.4 1996/01/10 20:41:59 markc Exp markc $
d9 3
d37 3
d41 1
a42 1
#include "../../mtc++/include/bst.h"
@


1.4
log
@correctly parses and sets up grammar rules -- does not yet makeModel()
@
text
@d6 1
a6 1
 * $Id: yaccgram.y,v 1.3 1996/01/08 22:12:17 markc Exp markc $
d9 3
d34 1
a36 1
#include "../../gendict/include/sentmdl.h"
a89 1
			yGram->dump();
a101 1
			yGram->dump();
d146 1
a146 1
	errorMsg(EMT_ERROR, buffer, "yyerror()");
@


1.3
log
@Modified language to only allow weights at the end of a RHS set
@
text
@d6 1
a6 1
 * $Id: yaccgram.y,v 1.2 1996/01/08 21:54:52 markc Exp markc $
d9 3
d36 7
a42 1
extern MTCgrammar *currentGrammar;
d44 1
d50 1
a50 1
	int  number;
d60 2
a61 2
		rule
	| 	grammar rule
d65 9
a73 1
		TOKEN ':' rhs ';'
d77 25
a101 4
		rhsTokens
	|	weightedRhsTokens
	|	rhs '|' rhsTokens
	|	rhs '|' weightedRhsTokens
d105 23
a127 2
		TOKEN			
	|	rhsTokens TOKEN
d131 5
a135 1
		rhsTokens WEIGHT
d143 1
a143 1
	sprintf(buffer, "Syntax Error on line # %d of %s", lexline, currentGrammar->getFileName().c_str());
@


1.2
log
@parses the grammar definition language correctly -- but with not meaning!
@
text
@d6 1
a6 1
 * $Id: yaccgram.y,v 1.1 1996/01/08 17:32:22 markc Exp markc $
d9 3
d60 1
d62 1
a67 1
	|	rhsTokens WEIGHT
d70 3
@


1.1
log
@Initial revision
@
text
@d6 5
a10 1
 * $Id$
a11 1
 * $Log$
d24 9
d40 3
a42 2
%token <string> token
%token <number> weight
d46 5
d52 1
a52 1
		token ':' rhs ';'
d61 3
a63 3
		token
	|	rhsTokens token
	|	rhsTokens weight
d70 5
a74 1
	errorMsg(EMT_ERROR, s, "yyerror()");
@
