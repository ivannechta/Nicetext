head	1.8;
access;
symbols;
locks; strict;
comment	@// @;


1.8
date	98.08.17.18.34.54;	author markc;	state Exp;
branches;
next	1.7;

1.7
date	97.03.05.17.49.59;	author markc;	state Exp;
branches;
next	1.6;

1.6
date	97.02.22.22.17.01;	author markc;	state Exp;
branches;
next	1.5;

1.5
date	97.02.16.06.58.59;	author markc;	state Exp;
branches;
next	1.4;

1.4
date	96.03.21.17.17.11;	author markc;	state Exp;
branches;
next	1.3;

1.3
date	95.11.13.01.07.08;	author chapman;	state Exp;
branches;
next	1.2;

1.2
date	95.11.05.01.09.11;	author chapman;	state Exp;
branches;
next	1.1;

1.1
date	95.11.05.00.05.00;	author chapman;	state Exp;
branches;
next	;


desc
@Initial Check-In
@


1.8
log
@added return -20 if the compare failed
@
text
@/*
 * BitTest program -- test the MTCbitStream classe
 * Copyright (c) Mark T. Chapman 1995
 *
 * $Id: bitcp.cc,v 1.7 1997/03/05 17:49:59 markc Exp markc $
 *
 * $Log: bitcp.cc,v $
 * Revision 1.7  1997/03/05 17:49:59  markc
 * Added static char rcsid []  = "@@(#)$Id$";
 *
 * Revision 1.6  1997/02/22 22:17:01  markc
 * Added validation step
 *
 * Revision 1.5  1997/02/16 06:58:59  markc
 * BST replaced with RBT
 *
 * Revision 1.4  1996/03/21 17:17:11  markc
 * renamed to bitcp, fixed messages
 *
 * Revision 1.3  1995/11/13 01:07:08  chapman
 * Added command-line file selection
 * Added extra-bits at the end to test output bitstream
 *
// Revision 1.2  1995/11/05  01:09:11  chapman
// clean up
//
// Revision 1.1  1995/11/05  00:05:00  chapman
// Initial revision
//
 *
 */

static char rcsid []  = "@@(#)$Id: bitcp.cc,v 1.7 1997/03/05 17:49:59 markc Exp markc $";

#include <iostream.h>
#include <fstream.h>
#include <stdio.h>
#include <stdlib.h>
#include <String.h>
#include <unistd.h>
#include "../../mtc++/include/MTC++.h"
#include "../../mtc++/include/mstring.h"
#include "../../mtc++/include/errormsg.h"
#include "../../mtc++/include/rbt.h"
#include "../../mtc++/include/list.h"
#include "../../mtc++/include/raof.h"
#include "../include/bitstrm.h"
#include "../include/bitinput.h"
#include "../include/bitoutput.h"

int main(int argc, char * argv[])
{
	// check parameters

	if (argc!=3)
	{
		cerr << "Usage: " << argv[0] << " inputFile outputFile" << endl;
		return -1;
	}

	// open files

	MTCinputBitStream *input=new MTCinputBitStream(argv[1]);
	MTCoutputBitStream *output=new MTCoutputBitStream(argv[2]);

	if (input==NULL)
	{
		perror(argv[1]);
		return -2;
	}

	if (output==NULL)
	{
		perror(argv[2]);
		return -3;
	}

	// copy input file to output file bit by bit

	bitBucketType c;
	long size;

	cerr << "bitcp program started" << endl;
	cerr << "\tcopying bits from " << argv[1] << " to " << argv[2] << "..." << endl;

	while (input->getStreamBitsLeft()>0)
	{
		size=random()%21;		// how many bits to read?
		c=input->readBits(size);	 	// read them	
		output->writeBits(c, size);	// write them
	}

	// why not dump a few more bits to output? 

	cerr << "\tdumping (ignorable) zeroes into the output bitstream" << endl;

	c=0;

	for(int i=0; i<1000; i++)
	{
		size=random()%21;		// how many bits to "write"?
		output->writeBits(c, size);	// this should do nothing!
	}

	if (input!=NULL)
	{
		delete input;
		input=NULL;
	}

	if (output!=NULL)
	{
		delete output;
		output=NULL;
	}

	sync();

	cerr << "Comparing Files..." << endl;

	ifstream compIn(argv[1]);
	ifstream compOut(argv[2]);

	char inChar;
	char outChar;
	BOOL equal=TRUE;

	do
	{
		compIn >> inChar;
		compOut >> outChar;

		if (inChar!=outChar)
		{
			equal=FALSE;
		}
	} while ((!compIn.eof())&&(!compOut.eof())&&(equal==TRUE));

	if ((equal==FALSE)||(compIn.eof()!=compOut.eof()))
	{
		cerr << "\tWARNING: files are NOT equal -- bitcp FAILED" << endl;
		return -20;
	}
	else
	{
		cerr << "\tFiles ARE equal -- bitcp succeeded" << endl;
	}

	cerr << "That's All Folks!" << endl;

	return 0;
}
@


1.7
log
@Added static char rcsid []  = "@@(#)$Id$";
@
text
@d5 1
a5 1
 * $Id: bitcp.cc,v 1.6 1997/02/22 22:17:01 markc Exp markc $
d8 3
d33 1
a33 1
static char rcsid []  = "@@(#)$Id$";
d142 1
@


1.6
log
@Added validation step
@
text
@d5 1
a5 1
 * $Id: bitcp.cc,v 1.5 1997/02/16 06:58:59 markc Exp markc $
d8 3
d29 2
@


1.5
log
@BST replaced with RBT
@
text
@d5 1
a5 1
 * $Id: bitcp.cc,v 1.4 1996/03/21 17:17:11 markc Exp markc $
d8 3
d32 1
d55 14
a68 2
	MTCinputBitStream input(argv[1]);
	MTCoutputBitStream output(argv[2]);
d78 1
a78 1
	while (input.getStreamBitsLeft()>0)
d81 2
a82 2
		c=input.readBits(size);	 	// read them	
		output.writeBits(c, size);	// write them
d94 44
a137 1
		output.writeBits(c, size);	// this should do nothing!
@


1.4
log
@renamed to bitcp, fixed messages
@
text
@d5 1
a5 1
 * $Id: bitcp.cc,v 1.3 1995/11/13 01:07:08 chapman Exp markc $
d8 3
d32 1
a32 1
#include "../../mtc++/include/bst.h"
@


1.3
log
@Added command-line file selection
Added extra-bits at the end to test output bitstream
@
text
@d5 6
a10 1
 * $Id: bitest.cc,v 1.2 1995/11/05 01:09:11 chapman Exp chapman $
a11 1
 * $Log: bitest.cc,v $
d56 2
a57 1
	cerr << "Copying bits from " << argv[1] << " to " << argv[2] << endl;
d68 1
a68 1
	cerr << "Dumping zeroes into " << argv[2] << "bitstream" << endl;
d77 2
@


1.2
log
@clean up
@
text
@d5 1
a5 1
 * $Id: bitest.cc,v 1.1 1995/11/05 00:05:00 chapman Exp chapman $
d8 3
d32 1
a32 1
int main()
d34 19
a52 4
	MTCinputBitStream input("input.dat");
	MTCoutputBitStream output("output.dat");
	unsigned char c;
	int size;
d56 1
a56 1
		size=random()%9;		// how many bits to read?
d59 12
@


1.1
log
@Initial revision
@
text
@d5 1
a5 1
 * $Id$
d7 4
a10 1
 * $Log$
d34 1
a34 3
	int size=8;

	cout << "Processing Bits: " << input.getStreamBitsLeft() << endl;
d38 3
a40 2
		size=random()%9;
		output.writeBits(c=input.readBits(size), size);	
@
