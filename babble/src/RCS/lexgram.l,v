head	1.8;
access;
symbols;
locks; strict;
comment	@ * @;


1.8
date	98.06.22.18.16.01;	author markc;	state Exp;
branches;
next	1.7;

1.7
date	98.03.13.04.02.34;	author root;	state Exp;
branches;
next	1.6;

1.6
date	96.02.07.03.51.48;	author markc;	state Exp;
branches;
next	1.5;

1.5
date	96.01.13.12.00.33;	author markc;	state Exp;
branches;
next	1.4;

1.4
date	96.01.10.22.43.29;	author markc;	state Exp;
branches;
next	1.3;

1.3
date	96.01.10.20.41.59;	author markc;	state Exp;
branches;
next	1.2;

1.2
date	96.01.08.21.54.25;	author markc;	state Exp;
branches;
next	1.1;

1.1
date	96.01.08.17.32.14;	author markc;	state Exp;
branches;
next	;


desc
@initial check in
@


1.8
log
@*** empty log message ***
@
text
@%{
/*
 * 
 * Lex Input File for Grammar Scanning
 * Copyright (c) 1995, Mark T. Chapman
 * 
 * $Id: lexgram.l,v 1.7 1998/03/13 04:02:34 root Exp markc $
 *
 * $Log: lexgram.l,v $
 * Revision 1.7  1998/03/13 04:02:34  root
 * removed yywrap()
 *
 * Revision 1.6  1996/02/07 03:51:48  markc
 * Allowed commas in tokens
 *
 * Revision 1.5  1996/01/13  12:00:33  markc
 * added punctuation processing to grammar definition language using {}
 *
 * Revision 1.4  1996/01/10  22:43:29  markc
 * Allowed '+' to be valid in token names
 *
 * Revision 1.3  1996/01/10  20:41:59  markc
 * correctly parses and sets up grammar rules -- does not yet makeModel()
 *
 * Revision 1.2  1996/01/08  21:54:25  markc
 * parses tokens for grammar.def correctly
 *
 * Revision 1.1  1996/01/08  17:32:14  markc
 * Initial revision
 *
 *
 */

#include <string.h>
#include "y.tab.h"

static char rcsid []  = "@@(#)$Id: lexgram.l,v 1.7 1998/03/13 04:02:34 root Exp markc $";

extern YYSTYPE yylval;
long lexline=1;

%}

%s QUOTE
%%
<QUOTE>[^\{]*\}			{yylval.string=strdup(yytext); yylval.string[strlen(yylval.string)-1]=NULL; BEGIN 0; return PUNCT; }
\/\/.*$				{/* ignore single-line comments */}
[A-Za-z_\-]+[A-Za-z_\-0-9\+,]*	{yylval.string=strdup(yytext);	 return TOKEN;}
@@[0-9]+				{yylval.number=atol(&yytext[1]); return WEIGHT;}
":"				{yylval.number=0;	return ':';}
";"				{yylval.number=0;	return ';';}
"|"				{yylval.number=0;	return '|';}
\{				{BEGIN QUOTE; }
\n				{lexline++;}
(\t|" ")*			;
.				{yylval.number=0;	return BAD;}
%%

int yywrap()
{
	return 1;
}
@


1.7
log
@removed yywrap()
@
text
@d7 1
a7 1
 * $Id: lexgram.l,v 1.6 1996/02/07 03:51:48 markc Exp root $
d10 3
d37 1
a37 1
static char rcsid []  = "@@(#)$Id: lexgram.l,v 1.6 1996/02/07 03:51:48 markc Exp root $";
d59 4
@


1.6
log
@Allowed commas in tokens
@
text
@d7 1
a7 1
 * $Id: lexgram.l,v 1.5 1996/01/13 12:00:33 markc Exp markc $
d10 3
d34 1
a34 1
static char rcsid []  = "@@(#)$Id: lexgram.l,v 1.5 1996/01/13 12:00:33 markc Exp markc $";
a54 5

int yywrap()
{
	return 1;
}
@


1.5
log
@added punctuation processing to grammar definition language using {}
@
text
@d7 1
a7 1
 * $Id: lexgram.l,v 1.4 1996/01/10 22:43:29 markc Exp markc $
d10 3
d31 1
a31 1
static char rcsid []  = "@@(#)$Id: lexgram.l,v 1.4 1996/01/10 22:43:29 markc Exp markc $";
d42 1
a42 1
[A-Za-z_\-]+[A-Za-z_\-0-9\+]*	{yylval.string=strdup(yytext);	 return TOKEN;}
@


1.4
log
@Allowed '+' to be valid in token names
@
text
@d7 1
a7 1
 * $Id: lexgram.l,v 1.3 1996/01/10 20:41:59 markc Exp markc $
d10 3
d28 1
a28 1
static char rcsid []  = "@@(#)$Id: lexgram.l,v 1.3 1996/01/10 20:41:59 markc Exp markc $";
d35 1
d37 9
a45 7
\/\/.*$				/* ignore single-line comments */
[A-Za-z_\-]+[A-Za-z_\-0-9\+]*	yylval.string=strdup(yytext);	 return TOKEN;
@@[0-9]+				yylval.number=atol(&yytext[1]); return WEIGHT;
":"				yylval.number=0;	return ':';
";"				yylval.number=0;	return ';';
"|"				yylval.number=0;	return '|';
\n				lexline++;
d47 1
a47 1
.				yylval.number=0;	return BAD;
@


1.3
log
@correctly parses and sets up grammar rules -- does not yet makeModel()
@
text
@d7 1
a7 1
 * $Id: lexgram.l,v 1.2 1996/01/08 21:54:25 markc Exp markc $
d10 3
d25 1
a25 1
static char rcsid []  = "@@(#)$Id: lexgram.l,v 1.2 1996/01/08 21:54:25 markc Exp markc $";
d34 1
a34 1
[A-Za-z_\-]+[A-Za-z_\-0-9]*	yylval.string=strdup(yytext);	 return TOKEN;
@


1.2
log
@parses tokens for grammar.def correctly
@
text
@d7 1
a7 1
 * $Id: lexgram.l,v 1.1 1996/01/08 17:32:14 markc Exp markc $
d10 3
d19 1
d22 1
a22 1
static char rcsid []  = "@@(#)$Id: lexgram.l,v 1.1 1996/01/08 17:32:14 markc Exp markc $";
d24 1
a24 1
extern YYSTYPE yyval;
a26 6
#ifdef DEBUG
#define D	printf(":%s:\n", yytext);
#else
#define D
#endif // DEBUG

d31 5
a35 5
[A-Za-z_\-]+[A-Za-z_\-0-9]*	D yyval.string=yytext; return TOKEN;
@@[0-9]+				D yyval.number=atol(&yytext[1]);	return WEIGHT;
":"				D yyval.number=0;	return ':';
";"				D yyval.number=0;	return ';';
"|"				D yyval.number=0;	return '|';
d38 1
a38 1
.				D yyval.number=0;	return BAD;
@


1.1
log
@Initial revision
@
text
@d7 5
a11 1
 * $Id$
a12 1
 * $Log$
d18 4
a21 1
static char rcsid []  = "@@(#)$Id$";
d23 5
a27 3
#define TOKEN 	0
#define WEIGHT 	1
#define BAD 	2
d32 9
a40 7
[A-Za-z_\-]+[A-Za-z_\-0-9]*	return TOKEN;
@@[0-9]+				return WEIGHT;
":"				return ':';
";"				return ';';
"|"				return '|';
(\n|" ")*			;
.				return BAD;
@
