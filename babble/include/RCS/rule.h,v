head	1.10;
access;
symbols;
locks; strict;
comment	@ * @;


1.10
date	97.03.05.17.44.52;	author markc;	state Exp;
branches;
next	1.9;

1.9
date	96.04.11.17.26.06;	author markc;	state Exp;
branches;
next	1.8;

1.8
date	96.02.17.16.39.49;	author markc;	state Exp;
branches;
next	1.7;

1.7
date	96.01.13.12.01.06;	author markc;	state Exp;
branches;
next	1.6;

1.6
date	96.01.13.10.18.50;	author markc;	state Exp;
branches;
next	1.5;

1.5
date	96.01.12.23.51.57;	author markc;	state Exp;
branches;
next	1.4;

1.4
date	96.01.10.22.16.20;	author markc;	state Exp;
branches;
next	1.3;

1.3
date	96.01.10.20.42.55;	author markc;	state Exp;
branches;
next	1.2;

1.2
date	96.01.08.21.54.07;	author markc;	state Exp;
branches;
next	1.1;

1.1
date	96.01.08.17.33.01;	author markc;	state Exp;
branches;
next	;


desc
@initial
@


1.10
log
@Added static char rcsid []  = "@@(#)$Id$";
@
text
@
/*
 *
 * Grammar Rule Class -- Used by grammar
 * Copyright (c) 1995, Mark T. Chapman
 *
 * $Id: rule.h,v 1.9 1996/04/11 17:26:06 markc Exp markc $
 *
 * $Log: rule.h,v $
 * Revision 1.9  1996/04/11 17:26:06  markc
 * increased MAX_RULE_RHS to 1024
 *
 * Revision 1.8  1996/02/17 16:39:49  markc
 * changed MAX_RULE_RHS to 256
 *
 * Revision 1.7  1996/01/13  12:01:06  markc
 * added punctuation processing to grammar definition language using {}
 *
 * Revision 1.6  1996/01/13  10:18:50  markc
 * use new sentnode enabled sentence models
 *
 * Revision 1.5  1996/01/12  23:51:57  markc
 * dynamic grammar generated models work now
 *
 * Revision 1.4  1996/01/10  22:16:20  markc
 * makeModel() works
 *
 * Revision 1.3  1996/01/10  20:42:55  markc
 *  correctly parses and sets up grammar rules -- does not yet makeModel()
 *
 * Revision 1.2  1996/01/08  21:54:07  markc
 * not quite ready
 *
 * Revision 1.1  1996/01/08  17:33:01  markc
 * Initial revision
 *
 *
 */

#ifndef __RULE_H_
#define __RULE_H_

static char rcsid__RULE_H_ []  = "@@(#)$Id$";

#define MAX_RULE_RHS 	1024	// how many rules can go on RHS?

// forward references

class MTCrule;			// this class
class MTCruleRHS;		// right hand side of rule

// rhs of rule 

class MTCruleRHS {
private:
	MTCrule *rules[MAX_RULE_RHS+1];
	int max;
	int current;
	unsigned long weight;
protected:
public:
	// constructors and destructors
	MTCruleRHS();
	MTCruleRHS(const MTCruleRHS &s);
	virtual ~MTCruleRHS();

	// actions 
	void clear();	
	MTCrule *getFirstRHS()	{ current=-1; return(getNextRHS()); };
	MTCrule *getNextRHS();   
	BOOL appendRHS(MTCrule *r); 

	// attribute access methods
	int getCount() const 			{ return max+1; }; 
	unsigned long getWeight() const		{ return weight; };
	void setWeight(unsigned long l)		{ weight=l; };

	// overloaded assignment operator
	const MTCruleRHS & operator=(const MTCruleRHS &s);

	// dummy comparison operator for use in list class
	int operator==(const MTCruleRHS &) const;

	// stream insertor -- used for dumping rules only! 

	friend ostream & operator<<(ostream &s, MTCruleRHS &r);
};

// rule class used by a grammar

class MTCrule {
private:
	MTCstring name;			// rules are sorted by LHS name 
	MTClist <MTCruleRHS> *rhs;	// list of possible rhs
	MTCruleRHS nextRHS;		// next rhs
	long terminal;			// if this is a terminal, here is value
	unsigned long totalWeight;	// used for probabilities
	void init();			// shared ctor code
	void init(MTCrule &);		// shared ctor and operator=() code
	MTCruleRHS * pickRHSSet();	// used by makeModel()
	BOOL allPunct;			// make a model using all punctuation?
	BOOL isPunct;			// is the rule punct only?

protected:

public:
	// constructors and destructors
	MTCrule();				// default ctor
	MTCrule(const MTCstring &aName);	// parameterized ctor
	MTCrule(MTCrule &);			// copy ctor
	virtual ~MTCrule();			// virtual dtor	

	// actions
	void clear();
	BOOL appendRHS(MTCrule *r)	{ return nextRHS.appendRHS(r); };
	void commitRHSSet(unsigned long w); 	

	// attribute access methods
	long getRHSSetCount() const;
	void setTerminal(long aNum)	{ terminal=aNum; };
	long getTerminal() const	{ return terminal; };
	void setAllPunct(BOOL aBool)	{ allPunct=(aBool!=FALSE); };
	BOOL getAllPunct() const	{ return allPunct; };
	void setIsPunct()		{ isPunct=TRUE; };
	BOOL getIsPunct() const	 	{ return isPunct; }; 

	const MTCstring & getName() const 	{ return name; };
	void setName(const MTCstring &s) 	{ name=s; };

	// probably only used by grammar object 
       	void makeModel(MTCsentenceModel &model, int &maxSize);

	// overloaded operator methods
	MTCrule & operator=(MTCrule &);
	int isLessThan(const MTCrule &) const;
        int isEqual(const MTCrule &) const;
     	BOOL operator==(const MTCrule &) const;
        BOOL operator!=(const MTCrule &) const;
        BOOL operator<(const MTCrule &) const;
        BOOL operator<=(const MTCrule &) const;
        BOOL operator>(const MTCrule &) const;
        BOOL operator>=(const MTCrule &) const;

	// stream insertor -- used to dump rule only!
	friend ostream & operator<<(ostream &s, MTCrule &r);
};

#endif  __RULE_H_
@


1.9
log
@increased MAX_RULE_RHS to 1024
@
text
@d7 1
a7 1
 * $Id: rule.h,v 1.8 1996/02/17 16:39:49 markc Exp markc $
d10 3
d42 2
@


1.8
log
@changed MAX_RULE_RHS to 256
@
text
@d7 1
a7 1
 * $Id: rule.h,v 1.7 1996/01/13 12:01:06 markc Exp markc $
d10 3
d40 1
a40 1
#define MAX_RULE_RHS 	256	// how many rules can go on RHS?
@


1.7
log
@added punctuation processing to grammar definition language using {}
@
text
@d7 1
a7 1
 * $Id: rule.h,v 1.6 1996/01/13 10:18:50 markc Exp markc $
d10 3
d37 1
a37 1
#define MAX_RULE_RHS 	20	// how many rules can go on RHS?
@


1.6
log
@use new sentnode enabled sentence models
@
text
@d7 1
a7 1
 * $Id: rule.h,v 1.5 1996/01/12 23:51:57 markc Exp markc $
d10 3
d91 1
d111 4
a114 2
	void setAllPunct(BOOL aBool)		{ allPunct=(aBool!=FALSE); };
	BOOL getAllPunct() const		{ return allPunct; };
@


1.5
log
@dynamic grammar generated models work now
@
text
@d7 1
a7 1
 * $Id: rule.h,v 1.4 1996/01/10 22:16:20 markc Exp markc $
d10 3
d55 5
a63 5
	MTCrule *getFirstRHS()	{ current=-1; return(getNextRHS()); };
	MTCrule *getNextRHS();   
	
	BOOL appendRHS(MTCrule *r); 

d87 1
d107 2
@


1.4
log
@makeModel() works
@
text
@d7 1
a7 1
 * $Id: rule.h,v 1.3 1996/01/10 20:42:55 markc Exp markc $
d10 3
d101 2
@


1.3
log
@ correctly parses and sets up grammar rules -- does not yet makeModel()
@
text
@d7 1
a7 1
 * $Id: rule.h,v 1.2 1996/01/08 21:54:07 markc Exp markc $
d10 3
d80 1
d101 3
@


1.2
log
@not quite ready
@
text
@d7 1
a7 1
 * $Id: rule.h,v 1.1 1996/01/08 17:33:01 markc Exp markc $
d10 3
d40 3
a42 5
	MTCruleRHS() : max(-1), weight(0) 
		{ for(int i=0; i<MAX_RULE_RHS; i++) rules[i]=NULL; };

	MTCruleRHS(const MTCruleRHS &s) : max(s.max), weight(s.weight)
	 	{ for(int i=0; i<MAX_RULE_RHS; i++) rules[i]=s.rules[i]; };
d45 1
a45 6

	void clear()	
	 	{ 	max=-1; current=-1; weight=0;
			for(int i=0; i<MAX_RULE_RHS; i++) rules[i]=NULL;
		};

d51 1
a51 3

	MTCrule *getNextRHS()   
		{ if ((++current)<=max) return rules[current]; else return NULL; };
d53 1
a53 13
	BOOL appendRHS(MTCrule *r) 
		{ 
			if ((max+1)<MAX_RULE_RHS)
			{
				rules[max++]=r;
				return TRUE;
			}
			else
			{
				errorMsg(EMT_WARNING, "I cannot handle that many RHS's for a rule.  Please adjust MAX_RULE_RHS in rules.h", "MTCruleRHS::appendRHS()");
				return FALSE;
			}
		};
d56 1
d58 2
a59 5
	const MTCruleRHS & operator=(const MTCruleRHS &s)
		{ max=s.max; weight=s.weight;
	 	  for(int i=0; i<MAX_RULE_RHS; i++) rules[i]=s.rules[i]; 
		  return *this;
		};
d61 1
a61 1
	// dummy comparison operator for use in list class
d63 1
a63 1
	int operator==(const MTCruleRHS) const { return FALSE; };
d71 1
a71 1
	MTClist <MTCruleRHS> rhs;	// list of possible rhs
d75 2
d88 1
d90 1
a90 8

	void commitRHSSet(unsigned long w) 	
	{ 
		totalWeight+=w;
		nextRHS.setWeight(totalWeight);
		rhs.add(nextRHS); 
		nextRHS.clear(); 
	};
d93 1
a93 1
	long getRHSSetCount() const		{ return rhs.getCount(); };
d108 3
@


1.1
log
@Initial revision
@
text
@d7 5
a11 1
 * $Id$
a12 1
 * $Log$
d19 1
a19 1
#define MAX_RULE_RHS 	10	// how many rules can go on RHS?
d31 1
a31 1
	int count;
d37 1
a37 1
	MTCruleRHS() : count(0), weight(0) 
d40 1
a40 1
	MTCruleRHS(const MTCruleRHS &s) : count(s.count), weight(s.weight)
d43 10
a52 2
	// attribute access methods
	int getCount() const { return count; }; 
d54 1
a54 1
	MTCrule *getFirstRHS()  { current=-1; return(getNextRHS()); };
d57 1
a57 1
		{ if ((++current)<count) return rules[current]; else return NULL; };
d61 1
a61 1
			if ((count+1)<MAX_RULE_RHS)
d63 1
a63 1
				rules[count++]=r;
d76 1
a76 1
		{ count=s.count; weight=s.weight;
d78 1
d92 1
d100 21
a120 3
	MTCrule(const char *aName);
	MTCrule(const MTCrule &);
	virtual ~MTCrule();	
d123 1
a123 1
	MTCrule & operator=(const MTCrule &);
a131 1

@
