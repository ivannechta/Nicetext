head	1.4;
access;
symbols;
locks; strict;
comment	@// @;


1.4
date	97.03.05.15.51.25;	author markc;	state Exp;
branches;
next	1.3;

1.3
date	97.02.16.02.56.01;	author markc;	state Exp;
branches;
next	1.2;

1.2
date	96.01.20.16.54.11;	author markc;	state Exp;
branches;
next	1.1;

1.1
date	96.01.14.22.51.00;	author markc;	state Exp;
branches;
next	;


desc
@initial
@


1.4
log
@Added static char rcsid []  = "@@(#)$Id$";
@
text
@/*
 * Sample MTC++ program.
 *
 * Input Strings into a tree
 *
 * $Id: rbttest.cc,v 1.3 1997/02/16 02:56:01 markc Exp markc $
 *
 * $Log: rbttest.cc,v $
 * Revision 1.3  1997/02/16 02:56:01  markc
 * added test for findClosestSmaller()
 *
 * Revision 1.2  1996/01/20 16:54:11  markc
 * use cerr and cout for a single dump.
 *
// Revision 1.2  1996/01/14  22:52:18  markc
// added check for eof
//
// Revision 1.1  1996/01/14  22:34:55  markc
// Initial revision
//
 *
 */

static char rcsid []  = "@@(#)$Id$";

#include "../include/MTC++.h"
#include "../include/mstring.h"
#include "../include/errormsg.h"
#include "../include/rbt.h"

void dumpString(MTCstring *aString);

int main(int argc, char *argv[])
{
	MTCstring string;
	MTCRBT <MTCstring> RBT;

	if (argc!=1)
	{
	}
	// title 

	cerr << "MTC++ Red-Black Tree Object Test Utility" << endl;
        cerr << "Copyright (c) 1995, Mark T. Chapman" << endl;
	cerr << endl;
	cerr << "Please enter a bunch of strings.  End with `quit'." << endl;

	cin >> string;

	while ((!cin.eof())&&(string!="quit"))
	{
		RBT.add(string);

		cin >> string;
	}

	cerr << "Dumping " << RBT.getCount() << " sorted strings to stdout..." << endl;

	RBT.forEach(dumpString);

	if (!cin.eof())
	{
		cerr << "Now we will test the 'findClosestSmaller() method'..." << endl;
		cerr << "Enter a set of strings.  Review list with `list'. End with `quit'." << endl;
		
		MTCstring *closest=NULL;

		string="";

		while ((!cin.eof())&&(string!="quit"))
		{
			cin >> string;

			if (string=="list")
			{
				RBT.forEach(dumpString);
			}
 			else
			{
				if ((closest=RBT.findClosestSmaller(string))==NULL)
				{
					cerr << "No strings we before '" << string << "' in the sorted list" << endl;	
				}
				else
				{
					cerr << *closest << " (is the closest string smaller than " << string << " in the sorted list" << endl;
				}
			}
		}
	}

	cerr << "That's All Folks!" << endl;

	return 0;
}

void dumpString(MTCstring *aString)
{
	cout << *aString << endl;
}
@


1.3
log
@added test for findClosestSmaller()
@
text
@d6 1
a6 1
 * $Id: rbttest.cc,v 1.2 1996/01/20 16:54:11 markc Exp markc $
d9 3
d23 2
@


1.2
log
@use cerr and cout for a single dump.
@
text
@d6 1
a6 1
 * $Id: rbttest.cc,v 1.2 1996/01/14 22:52:18 markc Exp markc $
d9 3
d28 1
a28 1
int main()
d33 3
d41 1
a41 1
	cerr << "Please enter a bunch of strings.  End with Control-D." << endl;
d45 1
a45 1
	while (!cin.eof())
d55 31
@


1.1
log
@Initial revision
@
text
@d6 1
a6 1
 * $Id$
d8 7
a14 1
 * $Log$
d32 4
a35 4
	cout << "MTC++ Tree Object Test Utility" << endl;
        cout << "Copyright (c) 1995, Mark T. Chapman" << endl;
	cout << endl;
	cout << "Please enter a bunch of strings.  End with QUIT." << endl;
d39 1
a39 1
	while ((string!="QUIT")&&(!cin.eof()))
d43 2
a44 1
		cout << " * * * * Start Dump" << endl;
d46 1
a46 1
		RBT.forEach(dumpString);
d48 1
a48 1
		cout << " * * * * End Dump" << endl;
d50 1
a50 3
		cin >> string;

	}
d57 1
a57 1
	cout << '\t' << *aString << endl;
@
