head	1.5;
access;
symbols;
locks; strict;
comment	@ * @;


1.5
date	97.03.05.17.39.05;	author markc;	state Exp;
branches;
next	1.4;

1.4
date	95.11.08.20.33.40;	author chapman;	state Exp;
branches;
next	1.3;

1.3
date	95.11.08.18.34.36;	author chapman;	state Exp;
branches;
next	1.2;

1.2
date	95.11.05.15.54.48;	author chapman;	state Exp;
branches;
next	1.1;

1.1
date	95.07.29.17.05.32;	author markc;	state Exp;
branches;
next	;


desc
@Initial Check In
@


1.5
log
@Added static char rcsid__DICTAREC_H_ []  = "@@(#)$Id$";
@
text
@
/*
 *
 * Type Record Class
 *
 * Copyright (c) Mark T. Chapman 1995
 *
 * class MTCtypeRecord - code, index, freq  
 *
 * SORTED BY (code)
 * Note: Alternate Type Record Class is sorted by (index)
 *
 * $Id: typerec.h,v 1.4 1995/11/08 20:33:40 chapman Exp markc $
 *
 * $Log: typerec.h,v $
 * Revision 1.4  1995/11/08 20:33:40  chapman
 * Added index parameter
 *
 * Revision 1.3  1995/11/08  18:34:36  chapman
 * Converted mstrtype.h to typerec.h
 *
 * Revision 1.2  1995/11/05  15:54:48  chapman
 * Added bitCount logic
 *
 * Revision 1.1  1995/07/29  17:05:32  markc
 * Initial revision
 *
 *
 */

#ifndef __TYPEREC_H_
#define __TYPEREC_H_

static char rcsid__TYPEREC_H_ []  = "@@(#)$Id$";

#define TYPEREC_CODE_MAX_LENGTH 512

class MTCtypeRecord {
private:
	MTCstring code;
	long index;
	long freq;
	long bitCount;
protected:
public:
	// constructors and destructor
	MTCtypeRecord() : freq(0), bitCount(0), index(0) {};
	MTCtypeRecord(const MTCtypeRecord &src) : code(src.code), 
		freq(src.freq), bitCount(src.bitCount), index(src.index) {};

	// attribute set/get methods 
	const MTCstring & getCode() const { return code; };
	long getFreq() const  { return freq;  };
	void setCode(const MTCstring &aString) { code=aString; };
	void setFreq(long aNum);
	long getBitCount() const { return bitCount; };
	void setIndex(long aNum) { index=aNum; };
	long getIndex() const { return index; };

	// overloaded operator methods
	MTCtypeRecord & operator=(const MTCtypeRecord &);
	virtual int isLessThan(const MTCtypeRecord &) const;
        virtual int isEqual(const MTCtypeRecord &) const;
     	BOOL operator==(const MTCtypeRecord &) const;
        BOOL operator!=(const MTCtypeRecord &) const;
        BOOL operator<(const MTCtypeRecord &)  const;
        BOOL operator<=(const MTCtypeRecord &) const;
        BOOL operator>(const MTCtypeRecord &)  const;
        BOOL operator>=(const MTCtypeRecord &) const;

        // stream insertor / extractors
        friend ostream & operator<<(ostream &, const MTCtypeRecord &);
        friend istream & operator>>(istream &, MTCtypeRecord &); 
};

#endif // __TYPEREC_H_
@


1.4
log
@Added index parameter
@
text
@d13 1
a13 1
 * $Id: typerec.h,v 1.3 1995/11/08 18:34:36 chapman Exp chapman $
d16 3
d31 4
a34 2
#ifndef __TYPEREC_H
#define __TYPEREC_H
d76 1
a76 1
#endif // __TYPEREC_H
@


1.3
log
@Converted mstrtype.h to typerec.h
@
text
@d8 1
a8 1
 * class MTCtypeRecord - code, freq  
d10 8
a17 1
 * $Id: mstrtype.h,v 1.2 1995/11/05 15:54:48 chapman Exp chapman $
a18 1
 * $Log: mstrtype.h,v $
d36 1
d42 3
a44 2
	MTCtypeRecord() : freq(0), bitCount(0) {};
	MTCtypeRecord(const MTCtypeRecord &src) : code(src.code), freq(src.freq), bitCount(src.bitCount) {};
d52 2
d57 2
a58 2
	int isLessThan(const MTCtypeRecord &) const;
        int isEqual(const MTCtypeRecord &) const;
@


1.2
log
@Added bitCount logic
@
text
@d4 2
a5 1
 * Master Type Structure 
d8 1
a8 1
 * class MTCmstrType - code, freq  
d10 1
a10 1
 * $Id: mstrtype.h,v 1.1 1995/07/29 17:05:32 markc Exp chapman $
d13 3
d22 2
a23 2
#ifndef __MSTRTYPE_H
#define __MSTRTYPE_H
d25 1
a25 1
#define MSTRTYPE_CODE_MAX_LENGTH 512
d27 1
a27 1
class MTCmstrType {
d35 2
a36 2
	MTCmstrType() : freq(0), bitCount(0) {};
	MTCmstrType(const MTCmstrType &src) : code(src.code), freq(src.freq), bitCount(src.bitCount) {};
d46 9
a54 9
	MTCmstrType & operator=(const MTCmstrType &);
	int isLessThan(const MTCmstrType &) const;
        int isEqual(const MTCmstrType &) const;
     	BOOL operator==(const MTCmstrType &) const;
        BOOL operator!=(const MTCmstrType &) const;
        BOOL operator<(const MTCmstrType &)  const;
        BOOL operator<=(const MTCmstrType &) const;
        BOOL operator>(const MTCmstrType &)  const;
        BOOL operator>=(const MTCmstrType &) const;
d57 2
a58 2
        friend ostream & operator<<(ostream &, const MTCmstrType &);
        friend istream & operator>>(istream &, MTCmstrType &); 
d61 1
a61 1
#endif // __MSTRTYPE_H
@


1.1
log
@Initial revision
@
text
@d9 5
a13 1
 * $Id$
a14 1
 * $Log$
d27 1
d31 2
a32 2
	MTCmstrType() : freq(0) {};
	MTCmstrType(const MTCmstrType &src) : code(src.code), freq(src.freq) { };
d38 2
a39 1
	void setFreq(long aNum)  { freq=aNum; };
@
