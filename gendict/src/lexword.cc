/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/ncvs/src/usr.bin/lex/skel.c,v 1.1.1.2.2.1 1997/02/23 01:37:10 joerg Exp $
 */

#define FLEX_SCANNER
#define ZZ_FLEX_MAJOR_VERSION 2
#define ZZ_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define ZZ_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define ZZ_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define ZZ_USE_PROTOS
#define ZZ_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define ZZ_USE_CONST
#define ZZ_USE_PROTOS
#endif

#ifdef ZZ_USE_CONST
#define zzconst const
#else
#define zzconst
#endif


#ifdef ZZ_USE_PROTOS
#define ZZ_PROTO(proto) proto
#else
#define ZZ_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define ZZ_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define ZZ_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN zz_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The ZZSTATE alias is for lex
 * compatibility.
 */
#define ZZ_START ((zz_start - 1) / 2)
#define ZZSTATE ZZ_START

/* Action number for EOF rule of a given start state. */
#define ZZ_STATE_EOF(state) (ZZ_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define ZZ_NEW_FILE zzrestart( zzin )

#define ZZ_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define ZZ_BUF_SIZE 16384

typedef struct zz_buffer_state *ZZ_BUFFER_STATE;

extern int zzleng;
extern FILE *zzin, *zzout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		zzless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the zzless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define zzless(n) \
	do \
		{ \
		/* Undo effects of setting up zztext. */ \
		*zz_cp = zz_hold_char; \
		ZZ_RESTORE_ZZ_MORE_OFFSET \
		zz_c_buf_p = zz_cp = zz_bp + n - ZZ_MORE_ADJ; \
		ZZ_DO_BEFORE_ACTION; /* set up zztext again */ \
		} \
	while ( 0 )

#define unput(c) zzunput( c, zztext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int zz_size_t;


struct zz_buffer_state
	{
	FILE *zz_input_file;

	char *zz_ch_buf;		/* input buffer */
	char *zz_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	zz_size_t zz_buf_size;

	/* Number of characters read into zz_ch_buf, not including EOB
	 * characters.
	 */
	int zz_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int zz_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int zz_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int zz_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int zz_fill_buffer;

	int zz_buffer_status;
#define ZZ_BUFFER_NEW 0
#define ZZ_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as ZZ_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via zzrestart()), so that the user can continue scanning by
	 * just pointing zzin at a new input file.
	 */
#define ZZ_BUFFER_EOF_PENDING 2
	};

static ZZ_BUFFER_STATE zz_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define ZZ_CURRENT_BUFFER zz_current_buffer


/* zz_hold_char holds the character lost when zztext is formed. */
static char zz_hold_char;

static int zz_n_chars;		/* number of characters read into zz_ch_buf */


int zzleng;

/* Points to current character in buffer. */
static char *zz_c_buf_p = (char *) 0;
static int zz_init = 1;		/* whether we need to initialize */
static int zz_start = 0;	/* start state number */

/* Flag which is used to allow zzwrap()'s to do buffer switches
 * instead of setting up a fresh zzin.  A bit of a hack ...
 */
static int zz_did_buffer_switch_on_eof;

void zzrestart ZZ_PROTO(( FILE *input_file ));

void zz_switch_to_buffer ZZ_PROTO(( ZZ_BUFFER_STATE new_buffer ));
void zz_load_buffer_state ZZ_PROTO(( void ));
ZZ_BUFFER_STATE zz_create_buffer ZZ_PROTO(( FILE *file, int size ));
void zz_delete_buffer ZZ_PROTO(( ZZ_BUFFER_STATE b ));
void zz_init_buffer ZZ_PROTO(( ZZ_BUFFER_STATE b, FILE *file ));
void zz_flush_buffer ZZ_PROTO(( ZZ_BUFFER_STATE b ));
#define ZZ_FLUSH_BUFFER zz_flush_buffer( zz_current_buffer )

ZZ_BUFFER_STATE zz_scan_buffer ZZ_PROTO(( char *base, zz_size_t size ));
ZZ_BUFFER_STATE zz_scan_string ZZ_PROTO(( zzconst char *zz_str ));
ZZ_BUFFER_STATE zz_scan_bytes ZZ_PROTO(( zzconst char *bytes, int len ));

static void *zz_flex_alloc ZZ_PROTO(( zz_size_t ));
static void *zz_flex_realloc ZZ_PROTO(( void *, zz_size_t ));
static void zz_flex_free ZZ_PROTO(( void * ));

#define zz_new_buffer zz_create_buffer

#define zz_set_interactive(is_interactive) \
	{ \
	if ( ! zz_current_buffer ) \
		zz_current_buffer = zz_create_buffer( zzin, ZZ_BUF_SIZE ); \
	zz_current_buffer->zz_is_interactive = is_interactive; \
	}

#define zz_set_bol(at_bol) \
	{ \
	if ( ! zz_current_buffer ) \
		zz_current_buffer = zz_create_buffer( zzin, ZZ_BUF_SIZE ); \
	zz_current_buffer->zz_at_bol = at_bol; \
	}

#define ZZ_AT_BOL() (zz_current_buffer->zz_at_bol)

typedef char ZZ_CHAR;
FILE *zzin = (FILE *) 0, *zzout = (FILE *) 0;
typedef int zz_state_type;
extern char *zztext;
#define zztext_ptr zztext
static zzconst short zz_nxt[][128] =
    {
    {
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0
    },

    {
        3,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        5,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    6,    7,    8,    8,    8,    8,    4,
        7,    7,    8,    9,    7,    4,   10,    4,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    7,    7,
        7,    7,    7,    6,    8,    8,    8,    8,   11,    8,

        8,    8,    8,    8,    8,    8,   12,    8,    8,   13,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    4,    4,    4,    4,    8,    4,    8,    8,    8,
       11,    8,    8,    8,    8,    8,    8,    8,   12,    8,
        8,   13,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    4,    4,    4,    7,    4
    },

    {
        3,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        5,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    6,    7,    8,    8,    8,    8,    4,

        7,    7,    8,    9,    7,    4,   10,    4,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    7,    7,
        7,    7,    7,    6,    8,    8,    8,    8,   11,    8,
        8,    8,    8,    8,    8,    8,   12,    8,    8,   13,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    4,    4,    4,    4,    8,    4,    8,    8,    8,
       11,    8,    8,    8,    8,    8,    8,    8,   12,    8,
        8,   13,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    4,    4,    4,    7,    4
    },

    {
       -3,   -3,   -3,   -3,   -3,   -3,   -3,   -3,   -3,   -3,

       -3,   -3,   -3,   -3,   -3,   -3,   -3,   -3,   -3,   -3,
       -3,   -3,   -3,   -3,   -3,   -3,   -3,   -3,   -3,   -3,
       -3,   -3,   -3,   -3,   -3,   -3,   -3,   -3,   -3,   -3,
       -3,   -3,   -3,   -3,   -3,   -3,   -3,   -3,   -3,   -3,
       -3,   -3,   -3,   -3,   -3,   -3,   -3,   -3,   -3,   -3,
       -3,   -3,   -3,   -3,   -3,   -3,   -3,   -3,   -3,   -3,
       -3,   -3,   -3,   -3,   -3,   -3,   -3,   -3,   -3,   -3,
       -3,   -3,   -3,   -3,   -3,   -3,   -3,   -3,   -3,   -3,
       -3,   -3,   -3,   -3,   -3,   -3,   -3,   -3,   -3,   -3,
       -3,   -3,   -3,   -3,   -3,   -3,   -3,   -3,   -3,   -3,

       -3,   -3,   -3,   -3,   -3,   -3,   -3,   -3,   -3,   -3,
       -3,   -3,   -3,   -3,   -3,   -3,   -3,   -3
    },

    {
        3,   -4,   -4,   -4,   -4,   -4,   -4,   -4,   -4,   -4,
       -4,   -4,   -4,   -4,   -4,   -4,   -4,   -4,   -4,   -4,
       -4,   -4,   -4,   -4,   -4,   -4,   -4,   -4,   -4,   -4,
       -4,   -4,   -4,   -4,   -4,   -4,   -4,   -4,   -4,   -4,
       -4,   -4,   -4,   -4,   -4,   -4,   -4,   -4,   -4,   -4,
       -4,   -4,   -4,   -4,   -4,   -4,   -4,   -4,   -4,   -4,
       -4,   -4,   -4,   -4,   -4,   -4,   -4,   -4,   -4,   -4,
       -4,   -4,   -4,   -4,   -4,   -4,   -4,   -4,   -4,   -4,

       -4,   -4,   -4,   -4,   -4,   -4,   -4,   -4,   -4,   -4,
       -4,   -4,   -4,   -4,   -4,   -4,   -4,   -4,   -4,   -4,
       -4,   -4,   -4,   -4,   -4,   -4,   -4,   -4,   -4,   -4,
       -4,   -4,   -4,   -4,   -4,   -4,   -4,   -4,   -4,   -4,
       -4,   -4,   -4,   -4,   -4,   -4,   -4,   -4
    },

    {
        3,   -5,   -5,   -5,   -5,   -5,   -5,   -5,   -5,   -5,
       14,   -5,   -5,   -5,   -5,   -5,   -5,   -5,   -5,   -5,
       -5,   -5,   -5,   -5,   -5,   -5,   -5,   -5,   -5,   -5,
       -5,   -5,   -5,   -5,   -5,   -5,   -5,   -5,   -5,   -5,
       -5,   -5,   -5,   -5,   -5,   -5,   -5,   -5,   -5,   -5,

       -5,   -5,   -5,   -5,   -5,   -5,   -5,   -5,   -5,   -5,
       -5,   -5,   -5,   -5,   -5,   -5,   -5,   -5,   -5,   -5,
       -5,   -5,   -5,   -5,   -5,   -5,   -5,   -5,   -5,   -5,
       -5,   -5,   -5,   -5,   -5,   -5,   -5,   -5,   -5,   -5,
       -5,   -5,   -5,   -5,   -5,   -5,   -5,   -5,   -5,   -5,
       -5,   -5,   -5,   -5,   -5,   -5,   -5,   -5,   -5,   -5,
       -5,   -5,   -5,   -5,   -5,   -5,   -5,   -5,   -5,   -5,
       -5,   -5,   -5,   -5,   -5,   -5,   -5,   -5
    },

    {
        3,   -6,   -6,   -6,   -6,   -6,   -6,   -6,   -6,   -6,
       15,   -6,   -6,   -6,   -6,   -6,   -6,   -6,   -6,   -6,

       -6,   -6,   -6,   -6,   -6,   -6,   -6,   -6,   -6,   -6,
       -6,   -6,   16,   17,   16,   -6,   -6,   -6,   -6,   -6,
       -6,   -6,   -6,   -6,   -6,   -6,   17,   -6,   -6,   -6,
       -6,   -6,   -6,   -6,   -6,   -6,   -6,   -6,   -6,   -6,
       -6,   -6,   -6,   17,   -6,   -6,   -6,   -6,   -6,   -6,
       -6,   -6,   -6,   -6,   -6,   -6,   -6,   -6,   -6,   -6,
       -6,   -6,   -6,   -6,   -6,   -6,   -6,   -6,   -6,   -6,
       -6,   -6,   -6,   -6,   -6,   -6,   -6,   -6,   -6,   -6,
       -6,   -6,   -6,   -6,   -6,   -6,   -6,   -6,   -6,   -6,
       -6,   -6,   -6,   -6,   -6,   -6,   -6,   -6,   -6,   -6,

       -6,   -6,   -6,   -6,   -6,   -6,   -6,   -6
    },

    {
        3,   -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,
       -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,
       -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,
       -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,
       -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,
       -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,
       -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,
       -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,
       -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,

       -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,
       -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,
       -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,
       -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7
    },

    {
        3,   -8,   -8,   -8,   -8,   -8,   -8,   -8,   -8,   -8,
       -8,   -8,   -8,   -8,   -8,   -8,   -8,   -8,   -8,   -8,
       -8,   -8,   -8,   -8,   -8,   -8,   -8,   -8,   -8,   -8,
       -8,   -8,   -8,   -8,   -8,   18,   18,   18,   18,   19,
       -8,   -8,   18,   18,   -8,   20,   20,   -8,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   21,   -8,

       -8,   -8,   -8,   -8,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   22,   18,   18,   18,   18,   23,   18,
       18,   18,   18,   24,   18,   18,   18,   18,   18,   18,
       18,   -8,   -8,   -8,   -8,   18,   -8,   18,   18,   18,
       18,   18,   18,   18,   18,   25,   18,   18,   18,   18,
       23,   18,   18,   18,   18,   24,   18,   18,   18,   18,
       18,   18,   18,   -8,   -8,   -8,   -8,   -8
    },

    {
        3,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,
       -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,
       -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,

       -9,   -9,   -9,   -9,   -9,   18,   18,   18,   18,   19,
       -9,   -9,   18,   18,   -9,   20,   20,   -9,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   21,   -9,
       -9,   -9,   -9,   -9,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   22,   18,   18,   18,   18,   23,   18,
       18,   18,   18,   24,   18,   18,   18,   18,   18,   18,
       18,   -9,   -9,   -9,   -9,   18,   -9,   18,   18,   18,
       18,   18,   18,   18,   18,   25,   18,   18,   18,   18,
       23,   18,   18,   18,   18,   24,   18,   18,   18,   18,
       18,   18,   18,   -9,   -9,   -9,   -9,   -9

    },

    {
        3,  -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,
       26,  -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,
      -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,
      -10,  -10,   27,   17,   16,  -10,  -10,  -10,  -10,  -10,
      -10,  -10,  -10,  -10,  -10,  -10,   28,  -10,  -10,  -10,
      -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,
      -10,  -10,  -10,   17,  -10,  -10,  -10,  -10,  -10,  -10,
      -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,
      -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,
      -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,

      -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,
      -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,
      -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10
    },

    {
        3,  -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,
      -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,
      -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,
      -11,  -11,  -11,  -11,  -11,   18,   18,   18,   18,   29,
      -11,  -11,   18,   18,  -11,   20,   20,  -11,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   21,  -11,
      -11,  -11,  -11,  -11,   18,   18,   18,   18,   18,   18,

       18,   18,   18,   22,   18,   18,   18,   18,   23,   18,
       18,   18,   18,   24,   18,   18,   18,   18,   18,   18,
       18,  -11,  -11,  -11,  -11,   18,  -11,   18,   18,   18,
       18,   18,   18,   18,   18,   25,   18,   18,   18,   18,
       23,   18,   18,   18,   18,   24,   18,   18,   18,   18,
       18,   18,   18,  -11,  -11,  -11,  -11,  -11
    },

    {
        3,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,
      -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,
      -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,
      -12,  -12,  -12,  -12,  -12,   18,   18,   18,   18,   30,

      -12,  -12,   18,   18,  -12,   20,   20,  -12,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   21,  -12,
      -12,  -12,  -12,  -12,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   22,   18,   18,   18,   18,   23,   18,
       18,   18,   18,   24,   18,   18,   18,   18,   18,   18,
       18,  -12,  -12,  -12,  -12,   18,  -12,   18,   18,   18,
       18,   18,   18,   18,   18,   25,   18,   18,   18,   18,
       23,   18,   18,   18,   18,   24,   18,   18,   18,   18,
       18,   18,   18,  -12,  -12,  -12,  -12,  -12
    },

    {
        3,  -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,

      -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,
      -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,
      -13,  -13,  -13,  -13,  -13,   18,   18,   18,   18,   31,
      -13,  -13,   18,   18,  -13,   20,   20,  -13,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   21,  -13,
      -13,  -13,  -13,  -13,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   22,   18,   18,   18,   18,   23,   18,
       18,   18,   18,   24,   18,   18,   18,   18,   18,   18,
       18,  -13,  -13,  -13,  -13,   18,  -13,   18,   18,   18,
       18,   18,   18,   18,   18,   25,   18,   18,   18,   18,

       23,   18,   18,   18,   18,   24,   18,   18,   18,   18,
       18,   18,   18,  -13,  -13,  -13,  -13,  -13
    },

    {
        3,  -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,
      -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,
      -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,
      -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,
      -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,
      -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,
      -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,
      -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,

      -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,
      -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,
      -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,
      -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,
      -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14
    },

    {
        3,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,
       15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,
      -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,
      -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,
      -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,

      -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,
      -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,
      -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,
      -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,
      -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,
      -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,
      -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,
      -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15
    },

    {
        3,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,
       15,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,

      -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,
      -16,  -16,   16,  -16,   16,  -16,  -16,  -16,  -16,  -16,
      -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,
      -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,
      -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,
      -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,
      -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,
      -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,
      -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,
      -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,

      -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16
    },

    {
        3,  -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,
       15,  -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,
      -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,
      -17,  -17,   16,   17,   16,  -17,  -17,  -17,  -17,  -17,
      -17,  -17,  -17,  -17,  -17,  -17,   17,  -17,  -17,  -17,
      -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,
      -17,  -17,  -17,   17,  -17,  -17,  -17,  -17,  -17,  -17,
      -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,
      -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,

      -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,
      -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,
      -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,
      -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17
    },

    {
        3,  -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,
      -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,
      -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,
      -18,  -18,  -18,  -18,  -18,   18,   18,   18,   18,   19,
      -18,  -18,   18,   18,  -18,   20,   20,  -18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   21,  -18,

      -18,  -18,  -18,  -18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   22,   18,   18,   18,   18,   23,   18,
       18,   18,   18,   24,   18,   18,   18,   18,   18,   18,
       18,  -18,  -18,  -18,  -18,   18,  -18,   18,   18,   18,
       18,   18,   18,   18,   18,   25,   18,   18,   18,   18,
       23,   18,   18,   18,   18,   24,   18,   18,   18,   18,
       18,   18,   18,  -18,  -18,  -18,  -18,  -18
    },

    {
        3,  -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,
      -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,
      -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,

      -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,
      -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,
      -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,
      -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,
      -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,
      -19,  -19,   32,   33,  -19,  -19,   34,  -19,  -19,  -19,
      -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,
      -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,
      -19,  -19,  -19,  -19,   35,   33,  -19,  -19,   36,  -19,
      -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19

    },

    {
        3,  -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,
      -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,
      -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,
      -20,  -20,  -20,  -20,  -20,   37,   37,   37,   37,  -20,
      -20,  -20,   37,   37,  -20,  -20,  -20,  -20,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,  -20,  -20,
      -20,  -20,  -20,  -20,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,  -20,  -20,  -20,  -20,   37,  -20,   37,   37,   37,

       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,  -20,  -20,  -20,  -20,  -20
    },

    {
        3,  -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,
      -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,
      -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,
      -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,
      -21,  -21,  -21,  -21,  -21,  -21,  -21,   38,  -21,  -21,
      -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,
      -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,

      -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,
      -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,
      -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,
      -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,
      -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,
      -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21
    },

    {
        3,  -22,  -22,  -22,  -22,  -22,  -22,  -22,  -22,  -22,
      -22,  -22,  -22,  -22,  -22,  -22,  -22,  -22,  -22,  -22,
      -22,  -22,  -22,  -22,  -22,  -22,  -22,  -22,  -22,  -22,
      -22,  -22,  -22,  -22,  -22,   18,   18,   18,   18,   19,

      -22,  -22,   18,   18,  -22,   20,   20,  -22,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   21,  -22,
      -22,  -22,  -22,  -22,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   22,   18,   18,   18,   18,   39,   18,
       18,   18,   18,   24,   18,   18,   18,   18,   18,   18,
       18,  -22,  -22,  -22,  -22,   18,  -22,   18,   18,   18,
       18,   18,   18,   18,   18,   25,   18,   18,   18,   18,
       23,   18,   18,   18,   18,   24,   18,   18,   18,   18,
       18,   18,   18,  -22,  -22,  -22,  -22,  -22
    },

    {
        3,  -23,  -23,  -23,  -23,  -23,  -23,  -23,  -23,  -23,

      -23,  -23,  -23,  -23,  -23,  -23,  -23,  -23,  -23,  -23,
      -23,  -23,  -23,  -23,  -23,  -23,  -23,  -23,  -23,  -23,
      -23,  -23,  -23,  -23,  -23,   18,   18,   18,   18,   40,
      -23,  -23,   18,   18,  -23,   20,   20,  -23,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   21,  -23,
      -23,  -23,  -23,  -23,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   22,   18,   18,   18,   18,   23,   18,
       18,   18,   18,   24,   18,   18,   18,   18,   18,   18,
       18,  -23,  -23,  -23,  -23,   18,  -23,   18,   18,   18,
       18,   18,   18,   18,   18,   25,   18,   18,   18,   18,

       23,   18,   18,   18,   18,   24,   18,   18,   18,   18,
       18,   18,   18,  -23,  -23,  -23,  -23,  -23
    },

    {
        3,  -24,  -24,  -24,  -24,  -24,  -24,  -24,  -24,  -24,
      -24,  -24,  -24,  -24,  -24,  -24,  -24,  -24,  -24,  -24,
      -24,  -24,  -24,  -24,  -24,  -24,  -24,  -24,  -24,  -24,
      -24,  -24,  -24,  -24,  -24,   18,   18,   18,   18,   41,
      -24,  -24,   18,   18,  -24,   20,   20,  -24,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   21,  -24,
      -24,  -24,  -24,  -24,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   22,   18,   18,   18,   18,   23,   18,

       18,   18,   18,   24,   18,   18,   18,   18,   18,   18,
       18,  -24,  -24,  -24,  -24,   18,  -24,   18,   18,   18,
       18,   18,   18,   18,   18,   25,   18,   18,   18,   18,
       23,   18,   18,   18,   18,   24,   18,   18,   18,   18,
       18,   18,   18,  -24,  -24,  -24,  -24,  -24
    },

    {
        3,  -25,  -25,  -25,  -25,  -25,  -25,  -25,  -25,  -25,
      -25,  -25,  -25,  -25,  -25,  -25,  -25,  -25,  -25,  -25,
      -25,  -25,  -25,  -25,  -25,  -25,  -25,  -25,  -25,  -25,
      -25,  -25,  -25,  -25,  -25,   18,   18,   18,   18,   19,
      -25,  -25,   18,   18,  -25,   20,   20,  -25,   18,   18,

       18,   18,   18,   18,   18,   18,   18,   18,   21,  -25,
      -25,  -25,  -25,  -25,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   22,   18,   18,   18,   18,   23,   18,
       18,   18,   18,   24,   18,   18,   18,   18,   18,   18,
       18,  -25,  -25,  -25,  -25,   18,  -25,   18,   18,   18,
       18,   18,   18,   18,   18,   25,   18,   18,   18,   18,
       39,   18,   18,   18,   18,   24,   18,   18,   18,   18,
       18,   18,   18,  -25,  -25,  -25,  -25,  -25
    },

    {
        3,  -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,
       26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,

      -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,
      -26,  -26,   42,  -26,  -26,  -26,  -26,  -26,  -26,  -26,
      -26,  -26,  -26,  -26,  -26,  -26,   43,  -26,  -26,  -26,
      -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,
      -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,
      -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,
      -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,
      -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,
      -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,
      -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,

      -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26
    },

    {
        3,  -27,  -27,  -27,  -27,  -27,  -27,  -27,  -27,  -27,
       26,  -27,  -27,  -27,  -27,  -27,  -27,  -27,  -27,  -27,
      -27,  -27,  -27,  -27,  -27,  -27,  -27,  -27,  -27,  -27,
      -27,  -27,   27,  -27,   16,  -27,  -27,  -27,  -27,  -27,
      -27,  -27,  -27,  -27,  -27,  -27,   43,  -27,  -27,  -27,
      -27,  -27,  -27,  -27,  -27,  -27,  -27,  -27,  -27,  -27,
      -27,  -27,  -27,  -27,  -27,  -27,  -27,  -27,  -27,  -27,
      -27,  -27,  -27,  -27,  -27,  -27,  -27,  -27,  -27,  -27,
      -27,  -27,  -27,  -27,  -27,  -27,  -27,  -27,  -27,  -27,

      -27,  -27,  -27,  -27,  -27,  -27,  -27,  -27,  -27,  -27,
      -27,  -27,  -27,  -27,  -27,  -27,  -27,  -27,  -27,  -27,
      -27,  -27,  -27,  -27,  -27,  -27,  -27,  -27,  -27,  -27,
      -27,  -27,  -27,  -27,  -27,  -27,  -27,  -27
    },

    {
        3,  -28,  -28,  -28,  -28,  -28,  -28,  -28,  -28,  -28,
       44,  -28,  -28,  -28,  -28,  -28,  -28,  -28,  -28,  -28,
      -28,  -28,  -28,  -28,  -28,  -28,  -28,  -28,  -28,  -28,
      -28,  -28,   45,   17,   16,  -28,  -28,  -28,  -28,  -28,
      -28,  -28,  -28,  -28,  -28,  -28,   46,  -28,  -28,  -28,
      -28,  -28,  -28,  -28,  -28,  -28,  -28,  -28,  -28,  -28,

      -28,  -28,  -28,   17,  -28,  -28,  -28,  -28,  -28,  -28,
      -28,  -28,  -28,  -28,  -28,  -28,  -28,  -28,  -28,  -28,
      -28,  -28,  -28,  -28,  -28,  -28,  -28,  -28,  -28,  -28,
      -28,  -28,  -28,  -28,  -28,  -28,  -28,  -28,  -28,  -28,
      -28,  -28,  -28,  -28,  -28,  -28,  -28,  -28,  -28,  -28,
      -28,  -28,  -28,  -28,  -28,  -28,  -28,  -28,  -28,  -28,
      -28,  -28,  -28,  -28,  -28,  -28,  -28,  -28
    },

    {
        3,  -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,
      -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,
      -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,

      -29,  -29,  -29,  -29,  -29,   18,   18,   18,   18,  -29,
      -29,  -29,   18,   18,  -29,  -29,  -29,  -29,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,  -29,  -29,
      -29,  -29,  -29,  -29,   18,   18,   18,   18,   47,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   48,   49,   18,   18,   50,   18,   18,   18,
       18,  -29,  -29,  -29,  -29,   18,  -29,   18,   18,   18,
       47,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   51,   49,   18,   18,   52,   18,
       18,   18,   18,  -29,  -29,  -29,  -29,  -29

    },

    {
        3,  -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,
      -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,
      -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,
      -30,  -30,  -30,  -30,  -30,   18,   18,   18,   18,  -30,
      -30,  -30,   18,   18,  -30,  -30,  -30,  -30,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,  -30,  -30,
      -30,  -30,  -30,  -30,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   53,   18,   18,   18,
       18,   18,   48,   49,   18,   18,   50,   18,   18,   18,
       18,  -30,  -30,  -30,  -30,   18,  -30,   18,   18,   18,

       18,   18,   18,   18,   18,   18,   18,   18,   53,   18,
       18,   18,   18,   18,   51,   49,   18,   18,   52,   18,
       18,   18,   18,  -30,  -30,  -30,  -30,  -30
    },

    {
        3,  -31,  -31,  -31,  -31,  -31,  -31,  -31,  -31,  -31,
      -31,  -31,  -31,  -31,  -31,  -31,  -31,  -31,  -31,  -31,
      -31,  -31,  -31,  -31,  -31,  -31,  -31,  -31,  -31,  -31,
      -31,  -31,  -31,  -31,  -31,   18,   18,   18,   18,  -31,
      -31,  -31,   18,   18,  -31,  -31,  -31,  -31,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,  -31,  -31,
      -31,  -31,  -31,  -31,   18,   18,   18,   18,   18,   18,

       18,   18,   18,   18,   18,   18,   18,   18,   18,   54,
       18,   18,   48,   49,   18,   18,   50,   18,   18,   18,
       18,  -31,  -31,  -31,  -31,   18,  -31,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   54,   18,   18,   51,   49,   18,   18,   52,   18,
       18,   18,   18,  -31,  -31,  -31,  -31,  -31
    },

    {
        3,  -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,
      -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,
      -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,
      -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,

      -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,
      -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,
      -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,   55,
      -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,
      -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,
      -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,
      -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,
      -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,
      -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32
    },

    {
        3,  -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,

      -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,
      -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,
      -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,   19,
      -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,
      -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,
      -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,
      -33,  -33,  -33,   56,  -33,  -33,  -33,  -33,   57,  -33,
      -33,  -33,  -33,   58,  -33,  -33,  -33,  -33,  -33,  -33,
      -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,
      -33,  -33,  -33,  -33,  -33,   59,  -33,  -33,  -33,  -33,

       57,  -33,  -33,  -33,  -33,   58,  -33,  -33,  -33,  -33,
      -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33
    },

    {
        3,  -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,
      -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,
      -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,
      -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,
      -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,
      -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,
      -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,   60,
      -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,

      -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,
      -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,
      -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,
      -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,
      -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34
    },

    {
        3,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,
      -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,
      -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,
      -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,
      -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,

      -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,
      -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,
      -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,
      -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,
      -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,
      -35,   55,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,
      -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,
      -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35
    },

    {
        3,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,
      -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,

      -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,
      -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,
      -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,
      -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,
      -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,
      -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,
      -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,
      -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,
      -36,   60,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,
      -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,

      -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36
    },

    {
        3,  -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,
      -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,
      -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,
      -37,  -37,  -37,  -37,  -37,   37,   37,   37,   37,  -37,
      -37,  -37,   37,   37,  -37,   20,   20,  -37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   21,  -37,
      -37,  -37,  -37,  -37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,

       37,  -37,  -37,  -37,  -37,   37,  -37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,  -37,  -37,  -37,  -37,  -37
    },

    {
        3,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,
      -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,
      -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,
      -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,
      -38,  -38,  -38,  -38,  -38,  -38,  -38,   20,  -38,  -38,
      -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,

      -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,
      -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,
      -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,
      -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,
      -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,
      -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,
      -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38
    },

    {
        3,  -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,
      -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,
      -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,

      -39,  -39,  -39,  -39,  -39,   18,   18,   18,   18,   61,
      -39,  -39,   18,   18,  -39,   20,   20,  -39,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   21,  -39,
      -39,  -39,  -39,  -39,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   22,   18,   18,   18,   18,   23,   18,
       18,   18,   18,   24,   18,   18,   18,   18,   18,   18,
       18,  -39,  -39,  -39,  -39,   18,  -39,   18,   18,   18,
       18,   18,   18,   18,   18,   25,   18,   18,   18,   18,
       23,   18,   18,   18,   18,   24,   18,   18,   18,   18,
       18,   18,   18,  -39,  -39,  -39,  -39,  -39

    },

    {
        3,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,
      -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,
      -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,
      -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,
      -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,
      -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,
      -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,
      -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,
      -40,  -40,   32,   33,   62,  -40,   34,  -40,  -40,  -40,
      -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,

      -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,
      -40,  -40,  -40,  -40,   35,   33,   62,  -40,   36,  -40,
      -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40
    },

    {
        3,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,
      -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,
      -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,
      -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,   19,
      -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,
      -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,
      -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,

      -41,  -41,  -41,   56,  -41,  -41,  -41,  -41,   57,  -41,
      -41,  -41,   32,   63,  -41,  -41,   34,  -41,  -41,  -41,
      -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,
      -41,  -41,  -41,  -41,  -41,   59,  -41,  -41,  -41,  -41,
       57,  -41,  -41,  -41,   35,   63,  -41,  -41,   36,  -41,
      -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41
    },

    {
        3,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,
       42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,
      -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,
      -42,  -42,   42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,

      -42,  -42,  -42,  -42,  -42,  -42,   43,  -42,  -42,  -42,
      -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,
      -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,
      -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,
      -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,
      -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,
      -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,
      -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,
      -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42
    },

    {
        3,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,

       64,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,
      -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,
      -43,  -43,   64,  -43,  -43,  -43,  -43,  -43,  -43,  -43,
      -43,  -43,  -43,  -43,  -43,  -43,   65,  -43,  -43,  -43,
      -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,
      -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,
      -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,
      -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,
      -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,
      -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,

      -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,
      -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43
    },

    {
        3,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,
       44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,
      -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,
      -44,  -44,   64,  -44,  -44,  -44,  -44,  -44,  -44,  -44,
      -44,  -44,  -44,  -44,  -44,  -44,   65,  -44,  -44,  -44,
      -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,
      -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,
      -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,

      -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,
      -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,
      -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,
      -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,
      -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44
    },

    {
        3,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,
       44,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,
      -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,
      -45,  -45,   45,  -45,   16,  -45,  -45,  -45,  -45,  -45,
      -45,  -45,  -45,  -45,  -45,  -45,   65,  -45,  -45,  -45,

      -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,
      -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,
      -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,
      -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,
      -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,
      -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,
      -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,
      -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45
    },

    {
        3,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,
       66,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,

      -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,
      -46,  -46,   67,   17,   16,  -46,  -46,  -46,  -46,  -46,
      -46,  -46,  -46,  -46,  -46,  -46,   17,  -46,  -46,  -46,
      -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,
      -46,  -46,  -46,   17,  -46,  -46,  -46,  -46,  -46,  -46,
      -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,
      -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,
      -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,
      -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,
      -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,

      -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46
    },

    {
        3,  -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,
      -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,
      -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,
      -47,  -47,  -47,  -47,  -47,   18,   18,   18,   18,   29,
      -47,  -47,   18,   18,  -47,   20,   20,  -47,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   21,  -47,
      -47,  -47,  -47,  -47,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   22,   18,   18,   18,   18,   23,   18,
       18,   18,   18,   24,   18,   18,   18,   18,   18,   18,

       18,  -47,  -47,  -47,  -47,   18,  -47,   18,   18,   18,
       18,   18,   18,   18,   18,   25,   18,   18,   18,   18,
       23,   18,   18,   18,   18,   24,   18,   18,   18,   18,
       18,   18,   18,  -47,  -47,  -47,  -47,  -47
    },

    {
        3,  -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,
      -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,
      -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,
      -48,  -48,  -48,  -48,  -48,   18,   18,   18,   18,   19,
      -48,  -48,   18,   18,  -48,   20,   20,  -48,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   21,  -48,

      -48,  -48,  -48,  -48,   18,   18,   18,   18,   18,   68,
       18,   18,   18,   22,   18,   18,   18,   18,   23,   18,
       18,   18,   18,   24,   18,   18,   18,   18,   18,   18,
       18,  -48,  -48,  -48,  -48,   18,  -48,   18,   18,   18,
       18,   18,   18,   18,   18,   25,   18,   18,   18,   18,
       23,   18,   18,   18,   18,   24,   18,   18,   18,   18,
       18,   18,   18,  -48,  -48,  -48,  -48,  -48
    },

    {
        3,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,
      -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,
      -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,

      -49,  -49,  -49,  -49,  -49,   18,   18,   18,   18,   19,
      -49,  -49,   18,   18,  -49,   20,   20,  -49,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   21,  -49,
      -49,  -49,  -49,  -49,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   22,   18,   18,   18,   18,   23,   18,
       18,   18,   18,   24,   18,   18,   18,   18,   18,   18,
       18,  -49,  -49,  -49,  -49,   18,  -49,   18,   18,   18,
       18,   18,   18,   18,   18,   25,   18,   18,   18,   18,
       23,   18,   18,   18,   18,   24,   18,   18,   18,   18,
       18,   18,   18,  -49,  -49,  -49,  -49,  -49

    },

    {
        3,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,
      -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,
      -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,
      -50,  -50,  -50,  -50,  -50,   18,   18,   18,   18,   19,
      -50,  -50,   18,   18,  -50,   20,   20,  -50,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   21,  -50,
      -50,  -50,  -50,  -50,   18,   18,   18,   18,   18,   69,
       18,   18,   18,   22,   18,   18,   18,   18,   23,   18,
       18,   18,   18,   24,   18,   18,   18,   18,   18,   18,
       18,  -50,  -50,  -50,  -50,   18,  -50,   18,   18,   18,

       18,   18,   18,   18,   18,   25,   18,   18,   18,   18,
       23,   18,   18,   18,   18,   24,   18,   18,   18,   18,
       18,   18,   18,  -50,  -50,  -50,  -50,  -50
    },

    {
        3,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,
      -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,
      -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,
      -51,  -51,  -51,  -51,  -51,   18,   18,   18,   18,   19,
      -51,  -51,   18,   18,  -51,   20,   20,  -51,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   21,  -51,
      -51,  -51,  -51,  -51,   18,   18,   18,   18,   18,   18,

       18,   18,   18,   22,   18,   18,   18,   18,   23,   18,
       18,   18,   18,   24,   18,   18,   18,   18,   18,   18,
       18,  -51,  -51,  -51,  -51,   18,  -51,   18,   18,   18,
       18,   68,   18,   18,   18,   25,   18,   18,   18,   18,
       23,   18,   18,   18,   18,   24,   18,   18,   18,   18,
       18,   18,   18,  -51,  -51,  -51,  -51,  -51
    },

    {
        3,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,
      -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,
      -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,
      -52,  -52,  -52,  -52,  -52,   18,   18,   18,   18,   19,

      -52,  -52,   18,   18,  -52,   20,   20,  -52,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   21,  -52,
      -52,  -52,  -52,  -52,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   22,   18,   18,   18,   18,   23,   18,
       18,   18,   18,   24,   18,   18,   18,   18,   18,   18,
       18,  -52,  -52,  -52,  -52,   18,  -52,   18,   18,   18,
       18,   69,   18,   18,   18,   25,   18,   18,   18,   18,
       23,   18,   18,   18,   18,   24,   18,   18,   18,   18,
       18,   18,   18,  -52,  -52,  -52,  -52,  -52
    },

    {
        3,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,

      -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,
      -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,
      -53,  -53,  -53,  -53,  -53,   18,   18,   18,   18,   30,
      -53,  -53,   18,   18,  -53,   20,   20,  -53,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   21,  -53,
      -53,  -53,  -53,  -53,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   22,   18,   18,   18,   18,   23,   18,
       18,   18,   18,   24,   18,   18,   18,   18,   18,   18,
       18,  -53,  -53,  -53,  -53,   18,  -53,   18,   18,   18,
       18,   18,   18,   18,   18,   25,   18,   18,   18,   18,

       23,   18,   18,   18,   18,   24,   18,   18,   18,   18,
       18,   18,   18,  -53,  -53,  -53,  -53,  -53
    },

    {
        3,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,
      -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,
      -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,
      -54,  -54,  -54,  -54,  -54,   18,   18,   18,   18,   31,
      -54,  -54,   18,   18,  -54,   20,   20,  -54,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   21,  -54,
      -54,  -54,  -54,  -54,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   22,   18,   18,   18,   18,   23,   18,

       18,   18,   18,   24,   18,   18,   18,   18,   18,   18,
       18,  -54,  -54,  -54,  -54,   18,  -54,   18,   18,   18,
       18,   18,   18,   18,   18,   25,   18,   18,   18,   18,
       23,   18,   18,   18,   18,   24,   18,   18,   18,   18,
       18,   18,   18,  -54,  -54,  -54,  -54,  -54
    },

    {
        3,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,
      -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,
      -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,
      -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,   19,
      -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,

      -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,
      -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,
      -55,  -55,  -55,   56,  -55,  -55,  -55,  -55,   57,  -55,
      -55,  -55,  -55,   58,  -55,  -55,  -55,  -55,  -55,  -55,
      -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,
      -55,  -55,  -55,  -55,  -55,   59,  -55,  -55,  -55,  -55,
       57,  -55,  -55,  -55,  -55,   58,  -55,  -55,  -55,  -55,
      -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55
    },

    {
        3,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,
      -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,

      -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,
      -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,
      -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,
      -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,
      -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,
      -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,   70,  -56,
      -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,
      -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,
      -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,
      -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,

      -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56
    },

    {
        3,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,
      -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,
      -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,
      -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,   71,
      -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,
      -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,
      -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,
      -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,
      -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,

      -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,
      -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,
      -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,
      -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57
    },

    {
        3,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,
      -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,
      -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,
      -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,   33,
      -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,
      -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,

      -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,
      -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,
      -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,
      -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,
      -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,
      -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,
      -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58
    },

    {
        3,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,
      -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,
      -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,

      -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,
      -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,
      -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,
      -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,
      -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,
      -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,
      -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,
      -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,
       70,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,
      -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59

    },

    {
        3,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,
      -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,
      -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,
      -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,   19,
      -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,
      -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,
      -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,
      -60,  -60,  -60,   56,  -60,  -60,  -60,  -60,   57,  -60,
      -60,  -60,  -60,   58,  -60,  -60,  -60,  -60,  -60,  -60,
      -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,

      -60,  -60,  -60,  -60,  -60,   59,  -60,  -60,  -60,  -60,
       57,  -60,  -60,  -60,  -60,   58,  -60,  -60,  -60,  -60,
      -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60
    },

    {
        3,  -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,
      -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,
      -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,
      -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,   19,
      -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,
      -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,
      -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,

      -61,  -61,  -61,   56,  -61,  -61,  -61,  -61,   57,  -61,
      -61,  -61,   32,   63,   62,  -61,   34,  -61,  -61,  -61,
      -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,
      -61,  -61,  -61,  -61,  -61,   59,  -61,  -61,  -61,  -61,
       57,  -61,  -61,  -61,   35,   63,   62,  -61,   36,  -61,
      -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61
    },

    {
        3,  -62,  -62,  -62,  -62,  -62,  -62,  -62,  -62,  -62,
      -62,  -62,  -62,  -62,  -62,  -62,  -62,  -62,  -62,  -62,
      -62,  -62,  -62,  -62,  -62,  -62,  -62,  -62,  -62,  -62,
      -62,  -62,  -62,  -62,  -62,  -62,  -62,  -62,  -62,   19,

      -62,  -62,  -62,  -62,  -62,  -62,  -62,  -62,  -62,  -62,
      -62,  -62,  -62,  -62,  -62,  -62,  -62,  -62,  -62,  -62,
      -62,  -62,  -62,  -62,  -62,  -62,  -62,  -62,  -62,  -62,
      -62,  -62,  -62,   56,  -62,  -62,  -62,  -62,   57,  -62,
      -62,  -62,  -62,   58,  -62,  -62,  -62,  -62,  -62,  -62,
      -62,  -62,  -62,  -62,  -62,  -62,  -62,  -62,  -62,  -62,
      -62,  -62,  -62,  -62,  -62,   59,  -62,  -62,  -62,  -62,
       57,  -62,  -62,  -62,  -62,   58,  -62,  -62,  -62,  -62,
      -62,  -62,  -62,  -62,  -62,  -62,  -62,  -62
    },

    {
        3,  -63,  -63,  -63,  -63,  -63,  -63,  -63,  -63,  -63,

      -63,  -63,  -63,  -63,  -63,  -63,  -63,  -63,  -63,  -63,
      -63,  -63,  -63,  -63,  -63,  -63,  -63,  -63,  -63,  -63,
      -63,  -63,  -63,  -63,  -63,  -63,  -63,  -63,  -63,   41,
      -63,  -63,  -63,  -63,  -63,  -63,  -63,  -63,  -63,  -63,
      -63,  -63,  -63,  -63,  -63,  -63,  -63,  -63,  -63,  -63,
      -63,  -63,  -63,  -63,  -63,  -63,  -63,  -63,  -63,  -63,
      -63,  -63,  -63,   56,  -63,  -63,  -63,  -63,   57,  -63,
      -63,  -63,  -63,   58,  -63,  -63,  -63,  -63,  -63,  -63,
      -63,  -63,  -63,  -63,  -63,  -63,  -63,  -63,  -63,  -63,
      -63,  -63,  -63,  -63,  -63,   59,  -63,  -63,  -63,  -63,

       57,  -63,  -63,  -63,  -63,   58,  -63,  -63,  -63,  -63,
      -63,  -63,  -63,  -63,  -63,  -63,  -63,  -63
    },

    {
        3,  -64,  -64,  -64,  -64,  -64,  -64,  -64,  -64,  -64,
       64,  -64,  -64,  -64,  -64,  -64,  -64,  -64,  -64,  -64,
      -64,  -64,  -64,  -64,  -64,  -64,  -64,  -64,  -64,  -64,
      -64,  -64,   64,  -64,  -64,  -64,  -64,  -64,  -64,  -64,
      -64,  -64,  -64,  -64,  -64,  -64,   65,  -64,  -64,  -64,
      -64,  -64,  -64,  -64,  -64,  -64,  -64,  -64,  -64,  -64,
      -64,  -64,  -64,  -64,  -64,  -64,  -64,  -64,  -64,  -64,
      -64,  -64,  -64,  -64,  -64,  -64,  -64,  -64,  -64,  -64,

      -64,  -64,  -64,  -64,  -64,  -64,  -64,  -64,  -64,  -64,
      -64,  -64,  -64,  -64,  -64,  -64,  -64,  -64,  -64,  -64,
      -64,  -64,  -64,  -64,  -64,  -64,  -64,  -64,  -64,  -64,
      -64,  -64,  -64,  -64,  -64,  -64,  -64,  -64,  -64,  -64,
      -64,  -64,  -64,  -64,  -64,  -64,  -64,  -64
    },

    {
        3,  -65,  -65,  -65,  -65,  -65,  -65,  -65,  -65,  -65,
       72,  -65,  -65,  -65,  -65,  -65,  -65,  -65,  -65,  -65,
      -65,  -65,  -65,  -65,  -65,  -65,  -65,  -65,  -65,  -65,
      -65,  -65,   72,  -65,  -65,  -65,  -65,  -65,  -65,  -65,
      -65,  -65,  -65,  -65,  -65,  -65,  -65,  -65,  -65,  -65,

      -65,  -65,  -65,  -65,  -65,  -65,  -65,  -65,  -65,  -65,
      -65,  -65,  -65,  -65,  -65,  -65,  -65,  -65,  -65,  -65,
      -65,  -65,  -65,  -65,  -65,  -65,  -65,  -65,  -65,  -65,
      -65,  -65,  -65,  -65,  -65,  -65,  -65,  -65,  -65,  -65,
      -65,  -65,  -65,  -65,  -65,  -65,  -65,  -65,  -65,  -65,
      -65,  -65,  -65,  -65,  -65,  -65,  -65,  -65,  -65,  -65,
      -65,  -65,  -65,  -65,  -65,  -65,  -65,  -65,  -65,  -65,
      -65,  -65,  -65,  -65,  -65,  -65,  -65,  -65
    },

    {
        3,  -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,
       66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,

      -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,
      -66,  -66,   72,  -66,  -66,  -66,  -66,  -66,  -66,  -66,
      -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,
      -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,
      -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,
      -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,
      -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,
      -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,
      -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,
      -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,

      -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66
    },

    {
        3,  -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,
       66,  -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,
      -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,
      -67,  -67,   67,  -67,   16,  -67,  -67,  -67,  -67,  -67,
      -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,
      -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,
      -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,
      -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,
      -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,

      -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,
      -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,
      -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,
      -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67
    },

    {
        3,  -68,  -68,  -68,  -68,  -68,  -68,  -68,  -68,  -68,
      -68,  -68,  -68,  -68,  -68,  -68,  -68,  -68,  -68,  -68,
      -68,  -68,  -68,  -68,  -68,  -68,  -68,  -68,  -68,  -68,
      -68,  -68,  -68,  -68,  -68,   18,   18,   18,   18,   19,
      -68,  -68,   18,   18,  -68,   20,   20,  -68,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   21,  -68,

      -68,  -68,  -68,  -68,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   22,   18,   18,   18,   18,   23,   18,
       18,   18,   18,   24,   18,   18,   18,   18,   18,   18,
       18,  -68,  -68,  -68,  -68,   18,  -68,   18,   18,   18,
       18,   18,   18,   18,   18,   25,   18,   18,   18,   18,
       23,   18,   18,   18,   18,   24,   18,   18,   18,   18,
       18,   18,   18,  -68,  -68,  -68,  -68,  -68
    },

    {
        3,  -69,  -69,  -69,  -69,  -69,  -69,  -69,  -69,  -69,
      -69,  -69,  -69,  -69,  -69,  -69,  -69,  -69,  -69,  -69,
      -69,  -69,  -69,  -69,  -69,  -69,  -69,  -69,  -69,  -69,

      -69,  -69,  -69,  -69,  -69,   18,   18,   18,   18,   19,
      -69,  -69,   18,   18,  -69,   20,   20,  -69,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   21,  -69,
      -69,  -69,  -69,  -69,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   22,   18,   18,   18,   18,   23,   18,
       18,   18,   18,   24,   18,   18,   18,   18,   18,   18,
       18,  -69,  -69,  -69,  -69,   18,  -69,   18,   18,   18,
       18,   18,   18,   18,   18,   25,   18,   18,   18,   18,
       23,   18,   18,   18,   18,   24,   18,   18,   18,   18,
       18,   18,   18,  -69,  -69,  -69,  -69,  -69

    },

    {
        3,  -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,
      -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,
      -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,
      -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,   33,
      -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,
      -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,
      -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,
      -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,
      -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,
      -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,

      -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,
      -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,
      -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70
    },

    {
        3,  -71,  -71,  -71,  -71,  -71,  -71,  -71,  -71,  -71,
      -71,  -71,  -71,  -71,  -71,  -71,  -71,  -71,  -71,  -71,
      -71,  -71,  -71,  -71,  -71,  -71,  -71,  -71,  -71,  -71,
      -71,  -71,  -71,  -71,  -71,  -71,  -71,  -71,  -71,  -71,
      -71,  -71,  -71,  -71,  -71,  -71,  -71,  -71,  -71,  -71,
      -71,  -71,  -71,  -71,  -71,  -71,  -71,  -71,  -71,  -71,
      -71,  -71,  -71,  -71,  -71,  -71,  -71,  -71,  -71,  -71,

      -71,  -71,  -71,  -71,  -71,  -71,  -71,  -71,  -71,  -71,
      -71,  -71,  -71,  -71,   62,  -71,  -71,  -71,  -71,  -71,
      -71,  -71,  -71,  -71,  -71,  -71,  -71,  -71,  -71,  -71,
      -71,  -71,  -71,  -71,  -71,  -71,  -71,  -71,  -71,  -71,
      -71,  -71,  -71,  -71,  -71,  -71,   62,  -71,  -71,  -71,
      -71,  -71,  -71,  -71,  -71,  -71,  -71,  -71
    },

    {
        3,  -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,
       72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,
      -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,
      -72,  -72,   72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,

      -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,
      -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,
      -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,
      -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,
      -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,
      -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,
      -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,
      -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,
      -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72
    },

    } ;


static zz_state_type zz_get_previous_state ZZ_PROTO(( void ));
static zz_state_type zz_try_NUL_trans ZZ_PROTO(( zz_state_type current_state ));
static int zz_get_next_buffer ZZ_PROTO(( void ));
static void zz_fatal_error ZZ_PROTO(( zzconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up zztext.
 */
#define ZZ_DO_BEFORE_ACTION \
	zztext_ptr = zz_bp; \
	zzleng = (int) (zz_cp - zz_bp); \
	zz_hold_char = *zz_cp; \
	*zz_cp = '\0'; \
	zz_c_buf_p = zz_cp;

#define ZZ_NUM_RULES 7
#define ZZ_END_OF_BUFFER 8
static zzconst short int zz_accept[73] =
    {   0,
        0,    0,    8,    6,    5,    3,    2,    1,    1,    3,
        1,    1,    1,    4,    3,    3,    3,    1,    0,    0,
        0,    1,    1,    1,    1,    3,    3,    3,    0,    0,
        0,    0,    1,    0,    0,    0,    1,    0,    1,    0,
        1,    0,    0,    3,    3,    2,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    0,    0,    0,    0,    1,
        1,    1,    1,    0,    2,    2,    2,    1,    1,    0,
        0,    2
    } ;

static zz_state_type zz_last_accepting_state;
static char *zz_last_accepting_cpos;

static zzconst zz_state_type zz_NUL_trans[73] =
    {   0,
        4,    4,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define zzmore() zzmore_used_but_not_detected
#define ZZ_MORE_ADJ 0
#define ZZ_RESTORE_ZZ_MORE_OFFSET
char *zztext;
#line 1 "lexword.l"
#define INITIAL 0
#line 2 "lexword.l"
/*
 * 
 * Lex Input File for Word and Sentence Parsing
 * Copyright (c) 1995, Mark T. Chapman
 * 
 * $Id: lexword.l,v 1.10 1998/06/22 18:16:12 markc Exp $
 *
 * $Log: lexword.l,v $
 * Revision 1.10  1998/06/22 18:16:12  markc
 * *** empty log message ***
 *
 * Revision 1.9  1998/03/13 04:02:07  root
 * removed zzwrap()
 *
 * Revision 1.8  1997/03/05 15:44:21  markc
 * Added nlAsPunct parameter.
 *
 * Revision 1.7  1997/03/04 16:09:50  markc
 * Added uppercase to 'x and x' options
 *
 * Revision 1.6  1997/03/03 19:09:41  markc
 * Do NOT return unrecognized letters as PUNCTUATION
 * This causes problems such as when "johnsons'" is really part of "'johnsons'"
 *
 * Revision 1.5  1997/03/03 03:20:15  markc
 * Added D'word O'word, prefixes for names
 *
 * Revision 1.4  1997/03/02 04:22:17  markc
 * Fixed can't from ca'nt to can't
 *
 * Revision 1.3  1997/03/01 22:38:10  markc
 * Allow contractions, hyphenation, http://, etc.
 *
 * Revision 1.2  1995/08/31 00:45:52  markc
 * Adjusted end-of-sentence punctuation rule to ignore punctuation after \n
 *
 * Revision 1.1  1995/07/29  17:20:54  markc
 * Initial revision
 *
 *
 */

static char rcsid []  = "@(#)$Id: lexword.l,v 1.10 1998/06/22 18:16:12 markc Exp $";

#define END_OF_WORD	0
#define END_OF_SENTENCE 1
#define PUNCTUATION	3

short nlAsPunct=0;

#line 1642 "lex.zz.c"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef ZZ_SKIP_ZZWRAP
#ifdef __cplusplus
extern "C" int zzwrap ZZ_PROTO(( void ));
#else
extern int zzwrap ZZ_PROTO(( void ));
#endif
#endif

#ifndef ZZ_NO_UNPUT
static void zzunput ZZ_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef zztext_ptr
static void zz_flex_strncpy ZZ_PROTO(( char *, zzconst char *, int ));
#endif

#ifdef ZZ_NEED_STRLEN
static int zz_flex_strlen ZZ_PROTO(( zzconst char * ));
#endif

#ifndef ZZ_NO_INPUT
#ifdef __cplusplus
static int zzinput ZZ_PROTO(( void ));
#else
static int input ZZ_PROTO(( void ));
#endif
#endif

#if ZZ_STACK_USED
static int zz_start_stack_ptr = 0;
static int zz_start_stack_depth = 0;
static int *zz_start_stack = 0;
#ifndef ZZ_NO_PUSH_STATE
static void zz_push_state ZZ_PROTO(( int new_state ));
#endif
#ifndef ZZ_NO_POP_STATE
static void zz_pop_state ZZ_PROTO(( void ));
#endif
#ifndef ZZ_NO_TOP_STATE
static int zz_top_state ZZ_PROTO(( void ));
#endif

#else
#define ZZ_NO_PUSH_STATE 1
#define ZZ_NO_POP_STATE 1
#define ZZ_NO_TOP_STATE 1
#endif

#ifdef ZZ_MALLOC_DECL
ZZ_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef ZZ_READ_BUF_SIZE
#define ZZ_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( zztext, zzleng, 1, zzout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or ZZ_NULL,
 * is returned in "result".
 */
#ifndef ZZ_INPUT
#define ZZ_INPUT(buf,result,max_size) \
	if ( (result = read( fileno(zzin), (char *) buf, max_size )) < 0 ) \
		ZZ_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "zzterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef zzterminate
#define zzterminate() return ZZ_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef ZZ_START_STACK_INCR
#define ZZ_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef ZZ_FATAL_ERROR
#define ZZ_FATAL_ERROR(msg) zz_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef ZZ_DECL
#define ZZ_DECL int zzlex ZZ_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after zztext and zzleng
 * have been set up.
 */
#ifndef ZZ_USER_ACTION
#define ZZ_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef ZZ_BREAK
#define ZZ_BREAK break;
#endif

#define ZZ_RULE_SETUP \
	ZZ_USER_ACTION

ZZ_DECL
	{
	register zz_state_type zz_current_state;
	register char *zz_cp, *zz_bp;
	register int zz_act;

#line 54 "lexword.l"

#line 1782 "lex.zz.c"

	if ( zz_init )
		{
		zz_init = 0;

#ifdef ZZ_USER_INIT
		ZZ_USER_INIT;
#endif

		if ( ! zz_start )
			zz_start = 1;	/* first start state */

		if ( ! zzin )
			zzin = stdin;

		if ( ! zzout )
			zzout = stdout;

		if ( ! zz_current_buffer )
			zz_current_buffer =
				zz_create_buffer( zzin, ZZ_BUF_SIZE );

		zz_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		zz_cp = zz_c_buf_p;

		/* Support of zztext. */
		*zz_cp = zz_hold_char;

		/* zz_bp points to the position in zz_ch_buf of the start of
		 * the current run.
		 */
		zz_bp = zz_cp;

		zz_current_state = zz_start;
zz_match:
		while ( (zz_current_state = zz_nxt[zz_current_state][ZZ_SC_TO_UI(*zz_cp)]) > 0 )
			{
			if ( zz_accept[zz_current_state] )
				{
				zz_last_accepting_state = zz_current_state;
				zz_last_accepting_cpos = zz_cp;
				}

			++zz_cp;
			}

		zz_current_state = -zz_current_state;

zz_find_action:
		zz_act = zz_accept[zz_current_state];

		ZZ_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( zz_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of ZZ_DO_BEFORE_ACTION */
			*zz_cp = zz_hold_char;
			zz_cp = zz_last_accepting_cpos + 1;
			zz_current_state = zz_last_accepting_state;
			goto zz_find_action;

case 1:
ZZ_RULE_SETUP
#line 55 "lexword.l"
return END_OF_WORD;
	ZZ_BREAK
case 2:
ZZ_RULE_SETUP
#line 56 "lexword.l"
return PUNCTUATION;;
	ZZ_BREAK
case 3:
ZZ_RULE_SETUP
#line 57 "lexword.l"
return END_OF_SENTENCE;
	ZZ_BREAK
case 4:
ZZ_RULE_SETUP
#line 58 "lexword.l"
return END_OF_SENTENCE;
	ZZ_BREAK
case 5:
ZZ_RULE_SETUP
#line 59 "lexword.l"
if (nlAsPunct!=0) { return PUNCTUATION;}
	ZZ_BREAK
case 6:
ZZ_RULE_SETUP
#line 60 "lexword.l"
;
	ZZ_BREAK
case 7:
ZZ_RULE_SETUP
#line 62 "lexword.l"
ECHO;
	ZZ_BREAK
#line 1888 "lex.zz.c"
case ZZ_STATE_EOF(INITIAL):
	zzterminate();

	case ZZ_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int zz_amount_of_matched_text = (int) (zz_cp - zztext_ptr) - 1;

		/* Undo the effects of ZZ_DO_BEFORE_ACTION. */
		*zz_cp = zz_hold_char;
		ZZ_RESTORE_ZZ_MORE_OFFSET

		if ( zz_current_buffer->zz_buffer_status == ZZ_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed zzin at a new source and called
			 * zzlex().  If so, then we have to assure
			 * consistency between zz_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			zz_n_chars = zz_current_buffer->zz_n_chars;
			zz_current_buffer->zz_input_file = zzin;
			zz_current_buffer->zz_buffer_status = ZZ_BUFFER_NORMAL;
			}

		/* Note that here we test for zz_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since zz_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( zz_c_buf_p <= &zz_current_buffer->zz_ch_buf[zz_n_chars] )
			{ /* This was really a NUL. */
			zz_state_type zz_next_state;

			zz_c_buf_p = zztext_ptr + zz_amount_of_matched_text;

			zz_current_state = zz_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * zz_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			zz_next_state = zz_try_NUL_trans( zz_current_state );

			zz_bp = zztext_ptr + ZZ_MORE_ADJ;

			if ( zz_next_state )
				{
				/* Consume the NUL. */
				zz_cp = ++zz_c_buf_p;
				zz_current_state = zz_next_state;
				goto zz_match;
				}

			else
				{
				zz_cp = zz_c_buf_p;
				goto zz_find_action;
				}
			}

		else switch ( zz_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				zz_did_buffer_switch_on_eof = 0;

				if ( zzwrap() )
					{
					/* Note: because we've taken care in
					 * zz_get_next_buffer() to have set up
					 * zztext, we can now set up
					 * zz_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * ZZ_NULL, it'll still work - another
					 * ZZ_NULL will get returned.
					 */
					zz_c_buf_p = zztext_ptr + ZZ_MORE_ADJ;

					zz_act = ZZ_STATE_EOF(ZZ_START);
					goto do_action;
					}

				else
					{
					if ( ! zz_did_buffer_switch_on_eof )
						ZZ_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				zz_c_buf_p =
					zztext_ptr + zz_amount_of_matched_text;

				zz_current_state = zz_get_previous_state();

				zz_cp = zz_c_buf_p;
				zz_bp = zztext_ptr + ZZ_MORE_ADJ;
				goto zz_match;

			case EOB_ACT_LAST_MATCH:
				zz_c_buf_p =
				&zz_current_buffer->zz_ch_buf[zz_n_chars];

				zz_current_state = zz_get_previous_state();

				zz_cp = zz_c_buf_p;
				zz_bp = zztext_ptr + ZZ_MORE_ADJ;
				goto zz_find_action;
			}
		break;
		}

	default:
		ZZ_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of zzlex */


/* zz_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int zz_get_next_buffer()
	{
	register char *dest = zz_current_buffer->zz_ch_buf;
	register char *source = zztext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( zz_c_buf_p > &zz_current_buffer->zz_ch_buf[zz_n_chars + 1] )
		ZZ_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( zz_current_buffer->zz_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( zz_c_buf_p - zztext_ptr - ZZ_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (zz_c_buf_p - zztext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( zz_current_buffer->zz_buffer_status == ZZ_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		zz_current_buffer->zz_n_chars = zz_n_chars = 0;

	else
		{
		int num_to_read =
			zz_current_buffer->zz_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef ZZ_USES_REJECT
			ZZ_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			ZZ_BUFFER_STATE b = zz_current_buffer;

			int zz_c_buf_p_offset =
				(int) (zz_c_buf_p - b->zz_ch_buf);

			if ( b->zz_is_our_buffer )
				{
				int new_size = b->zz_buf_size * 2;

				if ( new_size <= 0 )
					b->zz_buf_size += b->zz_buf_size / 8;
				else
					b->zz_buf_size *= 2;

				b->zz_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					zz_flex_realloc( (void *) b->zz_ch_buf,
							 b->zz_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->zz_ch_buf = 0;

			if ( ! b->zz_ch_buf )
				ZZ_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			zz_c_buf_p = &b->zz_ch_buf[zz_c_buf_p_offset];

			num_to_read = zz_current_buffer->zz_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > ZZ_READ_BUF_SIZE )
			num_to_read = ZZ_READ_BUF_SIZE;

		/* Read in more data. */
		ZZ_INPUT( (&zz_current_buffer->zz_ch_buf[number_to_move]),
			zz_n_chars, num_to_read );

		zz_current_buffer->zz_n_chars = zz_n_chars;
		}

	if ( zz_n_chars == 0 )
		{
		if ( number_to_move == ZZ_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			zzrestart( zzin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			zz_current_buffer->zz_buffer_status =
				ZZ_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	zz_n_chars += number_to_move;
	zz_current_buffer->zz_ch_buf[zz_n_chars] = ZZ_END_OF_BUFFER_CHAR;
	zz_current_buffer->zz_ch_buf[zz_n_chars + 1] = ZZ_END_OF_BUFFER_CHAR;

	zztext_ptr = &zz_current_buffer->zz_ch_buf[0];

	return ret_val;
	}


/* zz_get_previous_state - get the state just before the EOB char was reached */

static zz_state_type zz_get_previous_state()
	{
	register zz_state_type zz_current_state;
	register char *zz_cp;

	zz_current_state = zz_start;

	for ( zz_cp = zztext_ptr + ZZ_MORE_ADJ; zz_cp < zz_c_buf_p; ++zz_cp )
		{
		if ( *zz_cp )
			{
			zz_current_state = zz_nxt[zz_current_state][ZZ_SC_TO_UI(*zz_cp)];
			}
		else
			zz_current_state = zz_NUL_trans[zz_current_state];
		if ( zz_accept[zz_current_state] )
			{
			zz_last_accepting_state = zz_current_state;
			zz_last_accepting_cpos = zz_cp;
			}
		}

	return zz_current_state;
	}


/* zz_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = zz_try_NUL_trans( current_state );
 */

#ifdef ZZ_USE_PROTOS
static zz_state_type zz_try_NUL_trans( zz_state_type zz_current_state )
#else
static zz_state_type zz_try_NUL_trans( zz_current_state )
zz_state_type zz_current_state;
#endif
	{
	register int zz_is_jam;
	register char *zz_cp = zz_c_buf_p;

	zz_current_state = zz_NUL_trans[zz_current_state];
	zz_is_jam = (zz_current_state == 0);

	if ( ! zz_is_jam )
		{
		if ( zz_accept[zz_current_state] )
			{
			zz_last_accepting_state = zz_current_state;
			zz_last_accepting_cpos = zz_cp;
			}
		}

	return zz_is_jam ? 0 : zz_current_state;
	}


#ifndef ZZ_NO_UNPUT
#ifdef ZZ_USE_PROTOS
static void zzunput( int c, register char *zz_bp )
#else
static void zzunput( c, zz_bp )
int c;
register char *zz_bp;
#endif
	{
	register char *zz_cp = zz_c_buf_p;

	/* undo effects of setting up zztext */
	*zz_cp = zz_hold_char;

	if ( zz_cp < zz_current_buffer->zz_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = zz_n_chars + 2;
		register char *dest = &zz_current_buffer->zz_ch_buf[
					zz_current_buffer->zz_buf_size + 2];
		register char *source =
				&zz_current_buffer->zz_ch_buf[number_to_move];

		while ( source > zz_current_buffer->zz_ch_buf )
			*--dest = *--source;

		zz_cp += (int) (dest - source);
		zz_bp += (int) (dest - source);
		zz_current_buffer->zz_n_chars =
			zz_n_chars = zz_current_buffer->zz_buf_size;

		if ( zz_cp < zz_current_buffer->zz_ch_buf + 2 )
			ZZ_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--zz_cp = (char) c;


	zztext_ptr = zz_bp;
	zz_hold_char = *zz_cp;
	zz_c_buf_p = zz_cp;
	}
#endif	/* ifndef ZZ_NO_UNPUT */


#ifdef __cplusplus
static int zzinput()
#else
static int input()
#endif
	{
	int c;

	*zz_c_buf_p = zz_hold_char;

	if ( *zz_c_buf_p == ZZ_END_OF_BUFFER_CHAR )
		{
		/* zz_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( zz_c_buf_p < &zz_current_buffer->zz_ch_buf[zz_n_chars] )
			/* This was really a NUL. */
			*zz_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = zz_c_buf_p - zztext_ptr;
			++zz_c_buf_p;

			switch ( zz_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because zz_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					zzrestart( zzin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( zzwrap() )
						return EOF;

					if ( ! zz_did_buffer_switch_on_eof )
						ZZ_NEW_FILE;
#ifdef __cplusplus
					return zzinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					zz_c_buf_p = zztext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) zz_c_buf_p;	/* cast for 8-bit char's */
	*zz_c_buf_p = '\0';	/* preserve zztext */
	zz_hold_char = *++zz_c_buf_p;


	return c;
	}


#ifdef ZZ_USE_PROTOS
void zzrestart( FILE *input_file )
#else
void zzrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! zz_current_buffer )
		zz_current_buffer = zz_create_buffer( zzin, ZZ_BUF_SIZE );

	zz_init_buffer( zz_current_buffer, input_file );
	zz_load_buffer_state();
	}


#ifdef ZZ_USE_PROTOS
void zz_switch_to_buffer( ZZ_BUFFER_STATE new_buffer )
#else
void zz_switch_to_buffer( new_buffer )
ZZ_BUFFER_STATE new_buffer;
#endif
	{
	if ( zz_current_buffer == new_buffer )
		return;

	if ( zz_current_buffer )
		{
		/* Flush out information for old buffer. */
		*zz_c_buf_p = zz_hold_char;
		zz_current_buffer->zz_buf_pos = zz_c_buf_p;
		zz_current_buffer->zz_n_chars = zz_n_chars;
		}

	zz_current_buffer = new_buffer;
	zz_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (zzwrap()) processing, but the only time this flag
	 * is looked at is after zzwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	zz_did_buffer_switch_on_eof = 1;
	}


#ifdef ZZ_USE_PROTOS
void zz_load_buffer_state( void )
#else
void zz_load_buffer_state()
#endif
	{
	zz_n_chars = zz_current_buffer->zz_n_chars;
	zztext_ptr = zz_c_buf_p = zz_current_buffer->zz_buf_pos;
	zzin = zz_current_buffer->zz_input_file;
	zz_hold_char = *zz_c_buf_p;
	}


#ifdef ZZ_USE_PROTOS
ZZ_BUFFER_STATE zz_create_buffer( FILE *file, int size )
#else
ZZ_BUFFER_STATE zz_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	ZZ_BUFFER_STATE b;

	b = (ZZ_BUFFER_STATE) zz_flex_alloc( sizeof( struct zz_buffer_state ) );
	if ( ! b )
		ZZ_FATAL_ERROR( "out of dynamic memory in zz_create_buffer()" );

	b->zz_buf_size = size;

	/* zz_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->zz_ch_buf = (char *) zz_flex_alloc( b->zz_buf_size + 2 );
	if ( ! b->zz_ch_buf )
		ZZ_FATAL_ERROR( "out of dynamic memory in zz_create_buffer()" );

	b->zz_is_our_buffer = 1;

	zz_init_buffer( b, file );

	return b;
	}


#ifdef ZZ_USE_PROTOS
void zz_delete_buffer( ZZ_BUFFER_STATE b )
#else
void zz_delete_buffer( b )
ZZ_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == zz_current_buffer )
		zz_current_buffer = (ZZ_BUFFER_STATE) 0;

	if ( b->zz_is_our_buffer )
		zz_flex_free( (void *) b->zz_ch_buf );

	zz_flex_free( (void *) b );
	}


#ifndef ZZ_ALWAYS_INTERACTIVE
#ifndef ZZ_NEVER_INTERACTIVE
extern int isatty ZZ_PROTO(( int ));
#endif
#endif

#ifdef ZZ_USE_PROTOS
void zz_init_buffer( ZZ_BUFFER_STATE b, FILE *file )
#else
void zz_init_buffer( b, file )
ZZ_BUFFER_STATE b;
FILE *file;
#endif


	{
	zz_flush_buffer( b );

	b->zz_input_file = file;
	b->zz_fill_buffer = 1;

#if ZZ_ALWAYS_INTERACTIVE
	b->zz_is_interactive = 1;
#else
#if ZZ_NEVER_INTERACTIVE
	b->zz_is_interactive = 0;
#else
	b->zz_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef ZZ_USE_PROTOS
void zz_flush_buffer( ZZ_BUFFER_STATE b )
#else
void zz_flush_buffer( b )
ZZ_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->zz_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->zz_ch_buf[0] = ZZ_END_OF_BUFFER_CHAR;
	b->zz_ch_buf[1] = ZZ_END_OF_BUFFER_CHAR;

	b->zz_buf_pos = &b->zz_ch_buf[0];

	b->zz_at_bol = 1;
	b->zz_buffer_status = ZZ_BUFFER_NEW;

	if ( b == zz_current_buffer )
		zz_load_buffer_state();
	}


#ifndef ZZ_NO_SCAN_BUFFER
#ifdef ZZ_USE_PROTOS
ZZ_BUFFER_STATE zz_scan_buffer( char *base, zz_size_t size )
#else
ZZ_BUFFER_STATE zz_scan_buffer( base, size )
char *base;
zz_size_t size;
#endif
	{
	ZZ_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != ZZ_END_OF_BUFFER_CHAR ||
	     base[size-1] != ZZ_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (ZZ_BUFFER_STATE) zz_flex_alloc( sizeof( struct zz_buffer_state ) );
	if ( ! b )
		ZZ_FATAL_ERROR( "out of dynamic memory in zz_scan_buffer()" );

	b->zz_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->zz_buf_pos = b->zz_ch_buf = base;
	b->zz_is_our_buffer = 0;
	b->zz_input_file = 0;
	b->zz_n_chars = b->zz_buf_size;
	b->zz_is_interactive = 0;
	b->zz_at_bol = 1;
	b->zz_fill_buffer = 0;
	b->zz_buffer_status = ZZ_BUFFER_NEW;

	zz_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef ZZ_NO_SCAN_STRING
#ifdef ZZ_USE_PROTOS
ZZ_BUFFER_STATE zz_scan_string( zzconst char *zz_str )
#else
ZZ_BUFFER_STATE zz_scan_string( zz_str )
zzconst char *zz_str;
#endif
	{
	int len;
	for ( len = 0; zz_str[len]; ++len )
		;

	return zz_scan_bytes( zz_str, len );
	}
#endif


#ifndef ZZ_NO_SCAN_BYTES
#ifdef ZZ_USE_PROTOS
ZZ_BUFFER_STATE zz_scan_bytes( zzconst char *bytes, int len )
#else
ZZ_BUFFER_STATE zz_scan_bytes( bytes, len )
zzconst char *bytes;
int len;
#endif
	{
	ZZ_BUFFER_STATE b;
	char *buf;
	zz_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) zz_flex_alloc( n );
	if ( ! buf )
		ZZ_FATAL_ERROR( "out of dynamic memory in zz_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = ZZ_END_OF_BUFFER_CHAR;

	b = zz_scan_buffer( buf, n );
	if ( ! b )
		ZZ_FATAL_ERROR( "bad buffer in zz_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->zz_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef ZZ_NO_PUSH_STATE
#ifdef ZZ_USE_PROTOS
static void zz_push_state( int new_state )
#else
static void zz_push_state( new_state )
int new_state;
#endif
	{
	if ( zz_start_stack_ptr >= zz_start_stack_depth )
		{
		zz_size_t new_size;

		zz_start_stack_depth += ZZ_START_STACK_INCR;
		new_size = zz_start_stack_depth * sizeof( int );

		if ( ! zz_start_stack )
			zz_start_stack = (int *) zz_flex_alloc( new_size );

		else
			zz_start_stack = (int *) zz_flex_realloc(
					(void *) zz_start_stack, new_size );

		if ( ! zz_start_stack )
			ZZ_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	zz_start_stack[zz_start_stack_ptr++] = ZZ_START;

	BEGIN(new_state);
	}
#endif


#ifndef ZZ_NO_POP_STATE
static void zz_pop_state()
	{
	if ( --zz_start_stack_ptr < 0 )
		ZZ_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(zz_start_stack[zz_start_stack_ptr]);
	}
#endif


#ifndef ZZ_NO_TOP_STATE
static int zz_top_state()
	{
	return zz_start_stack[zz_start_stack_ptr - 1];
	}
#endif

#ifndef ZZ_EXIT_FAILURE
#define ZZ_EXIT_FAILURE 2
#endif

#ifdef ZZ_USE_PROTOS
static void zz_fatal_error( zzconst char msg[] )
#else
static void zz_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( ZZ_EXIT_FAILURE );
	}



/* Redefine zzless() so it works in section 3 code. */

#undef zzless
#define zzless(n) \
	do \
		{ \
		/* Undo effects of setting up zztext. */ \
		zztext[zzleng] = zz_hold_char; \
		zz_c_buf_p = zztext + n; \
		zz_hold_char = *zz_c_buf_p; \
		*zz_c_buf_p = '\0'; \
		zzleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef zztext_ptr
#ifdef ZZ_USE_PROTOS
static void zz_flex_strncpy( char *s1, zzconst char *s2, int n )
#else
static void zz_flex_strncpy( s1, s2, n )
char *s1;
zzconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef ZZ_NEED_STRLEN
#ifdef ZZ_USE_PROTOS
static int zz_flex_strlen( zzconst char *s )
#else
static int zz_flex_strlen( s )
zzconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef ZZ_USE_PROTOS
static void *zz_flex_alloc( zz_size_t size )
#else
static void *zz_flex_alloc( size )
zz_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef ZZ_USE_PROTOS
static void *zz_flex_realloc( void *ptr, zz_size_t size )
#else
static void *zz_flex_realloc( ptr, size )
void *ptr;
zz_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef ZZ_USE_PROTOS
static void zz_flex_free( void *ptr )
#else
static void zz_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if ZZ_MAIN
int main()
	{
	zzlex();
	return 0;
	}
#endif
#line 62 "lexword.l"


int zzwrap()
{
	return 1;
}
