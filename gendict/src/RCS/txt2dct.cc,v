head	1.4;
access;
symbols;
locks; strict;
comment	@// @;


1.4
date	97.03.05.17.41.20;	author markc;	state Exp;
branches;
next	1.3;

1.3
date	97.03.01.21.34.59;	author markc;	state Exp;
branches;
next	1.2;

1.2
date	96.03.21.17.18.56;	author markc;	state Exp;
branches;
next	1.1;

1.1
date	96.01.14.11.29.22;	author markc;	state Exp;
branches;
next	;


desc
@initial
@


1.4
log
@Added static char rcsid []  = "@@(#)$Id$";
@
text
@/*
 *
 * Read lines in each type file to create output suitable for sortdct
 *
 * Copyright (c) Mark T. Chapman, 1995
 *
 * $Id: txt2dct.cc,v 1.3 1997/03/01 21:34:59 markc Exp markc $
 *
 * $Log: txt2dct.cc,v $
 * Revision 1.3  1997/03/01 21:34:59  markc
 * Changed usage() messaage
 *
 * Revision 1.2  1996/03/21 17:18:56  markc
 * program name changes and messages (minor)
 *
 * Revision 1.1  1996/01/14 11:29:22  markc
 * Initial revision
 *
 *
 */

static char rcsid []  = "@@(#)$Id$";

#include <iostream.h>
#include <fstream.h>
#include <stdio.h>

#define MAX_LINE_LENGTH	1024

int processFile(const char *);
void usage();

int main(int argc, char *argv[])
{
	int okay=1;

	if (argc==1)
	{
		usage();
		return -1;
	}

	for(int i=1; i<argc; i++)
	{
		if (processFile(argv[i])!=0)
		{
			cerr << "* * * * FILE SKIPPED: " << argv[i] << endl;
			okay=0;
		}
	}

	if (okay==0)
	{
		usage();
	}

	return 0;
}

int processFile(const char *fileName)
{
	ifstream input(fileName);
	char buffer[MAX_LINE_LENGTH+1];

	if ((input==NULL)||(input.bad()))
	{
		perror(fileName);
		return 1;
	}

	do
	{
		input.getline(buffer, MAX_LINE_LENGTH);

		if ((strlen(buffer)!=0)&&(buffer[0]!='#'))
		{
			cout << fileName << " " << buffer << endl;
		}

	} while (!input.eof());

	return 0;
}

void usage()
{
	cerr << "Usage: txt2dct file1 [file2] [file3] [...]" << endl;
	cerr << endl;
}
@


1.3
log
@Changed usage() messaage
@
text
@d7 1
a7 1
 * $Id: txt2dct.cc,v 1.2 1996/03/21 17:18:56 markc Exp markc $
d10 3
d21 2
@


1.2
log
@program name changes and messages (minor)
@
text
@d7 1
a7 1
 * $Id: txt2dct.cc,v 1.1 1996/01/14 11:29:22 markc Exp markc $
d10 3
d60 1
a60 1
	if (input==NULL)
d62 1
d82 1
a82 4
	cerr << "Usage: txt2dct file1 file2 file3..." << endl;
	cerr << "\tEach filename becomes the type in the dct." << endl;
	cerr << "\tOne word per line in the file is required" << endl;
	cerr << "\tThe dct output is suitable for sortdct." << endl; 
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
 * Read lines in each type file to create output suitable for sortdict
d7 5
a11 1
 * $Id$
a12 1
 * $Log$
d80 2
a81 1
	cerr << "\tThe output is suitable for sortdict." << endl; 
@
