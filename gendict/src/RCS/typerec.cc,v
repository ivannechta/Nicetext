head	1.5;
access;
symbols;
locks; strict;
comment	@// @;


1.5
date	96.01.16.21.30.43;	author markc;	state Exp;
branches;
next	1.4;

1.4
date	95.11.08.20.33.13;	author chapman;	state Exp;
branches;
next	1.3;

1.3
date	95.11.08.18.34.07;	author chapman;	state Exp;
branches;
next	1.2;

1.2
date	95.11.05.15.54.33;	author chapman;	state Exp;
branches;
next	1.1;

1.1
date	95.07.29.17.06.44;	author markc;	state Exp;
branches;
next	;


desc
@Initial Check In
@


1.5
log
@fixed for(long bitString...) to use new gcc 2.7.0 bindings
(i.e. moved the declaration before the for() because it no longer is
good after the for() )
@
text
@/*
 * Type Record Class
 * Copyright (c) Mark T. Chapman 1995
 *
 * $Id: typerec.cc,v 1.4 1995/11/08 20:33:13 chapman Exp markc $
 *
 * $Log: typerec.cc,v $
// Revision 1.4  1995/11/08  20:33:13  chapman
// Added MTCtypeRecord::index processing
//
// Revision 1.3  1995/11/08  18:34:07  chapman
// Converted mstrtype.cc to typerec.cc
//
// Revision 1.2  1995/11/05  15:54:33  chapman
// Added bitCount logic
//
// Revision 1.1  1995/07/29  17:06:44  markc
// Initial revision
//
 *
 */

static char rcsid []  = "@@(#)$Id: typerec.cc,v 1.4 1995/11/08 20:33:13 chapman Exp markc $";

#include <iostream.h>
#include <fstream.h>
#include "../../mtc++/include/MTC++.h"
#include "../../mtc++/include/mstring.h"
#include "../../mtc++/include/errormsg.h"
#include "../include/typerec.h"

// set the freq and computer the bitCount

void MTCtypeRecord::setFreq(long aNum)
{
	freq=aNum;

	if (freq<0)
	{
		freq=0;
	}

	bitCount=0;

	long bitString;

 	for(bitString=1; freq>=bitString; bitString = bitString << 1)
	{ 
		bitCount++; 
	} 
			 
	if ((bitCount>=1)&&(freq!=bitString))
	{ 
		bitCount--;
	}
}

// typeRecord stream insertor operator

ostream & operator<<(ostream & anOStream, const MTCtypeRecord & aSrc)
{
	// note: bitcount is computed from the setFreq in extractor

	anOStream << aSrc.getIndex() << " " << aSrc.getFreq() << " " <<  aSrc.getCode() << endl;
	return anOStream;
}

// typeRecord stream extractor operator

istream & operator>>(istream & anIStream, MTCtypeRecord & aSrc)
{
	// read index
	long tempIndex;
	anIStream >> tempIndex;
	aSrc.setIndex(tempIndex);

	// read frequency
	long tempFreq;
	anIStream >> tempFreq;
	aSrc.setFreq(tempFreq);	// this computes bitCount...

	// get code -- but skip the leading whitespace!

	MTCstring temp;
	char buffer[TYPEREC_CODE_MAX_LENGTH+1];
	char *startbuffer=NULL;

	anIStream.getline(buffer, TYPEREC_CODE_MAX_LENGTH);

	int i;

	for(i=0; i<strlen(buffer); i++)
	{
		if (isprint(buffer[i])&&(buffer[i]!=' '))
		{
			startbuffer=&buffer[i];
			break;
		}
	}

	temp=startbuffer;

	aSrc.setCode(temp);

	return anIStream;
}

// < comparison

int MTCtypeRecord::isLessThan(const MTCtypeRecord & aSrc) const
{
	return (code<aSrc.code);
}

// equivalence test

int MTCtypeRecord::isEqual(const MTCtypeRecord & aSrc) const
{
	return (code==aSrc.code);
}

// == operator

BOOL MTCtypeRecord::operator==(const MTCtypeRecord & aSrc) const
{
	return (isEqual(aSrc));
}

// != operator

BOOL MTCtypeRecord::operator!=(const MTCtypeRecord & aSrc) const
{
	return (!isEqual(aSrc));
}

// DictEnt < operator

BOOL MTCtypeRecord::operator<(const MTCtypeRecord & aSrc)  const
{
	return (isLessThan(aSrc));
}

// DictEnt <= operator

BOOL MTCtypeRecord::operator<=(const MTCtypeRecord & aSrc) const
{
	return (isLessThan(aSrc)||isEqual(aSrc));
}

// DictEnt > operator

BOOL MTCtypeRecord::operator>(const MTCtypeRecord & aSrc)  const
{
	return (!(isLessThan(aSrc)||(isEqual(aSrc))));
}

// DictEnt >= operator

BOOL MTCtypeRecord::operator>=(const MTCtypeRecord & aSrc) const
{
	return (!(isLessThan(aSrc)));
}

// overloaded = operator

MTCtypeRecord & MTCtypeRecord::operator=(const MTCtypeRecord &aSrc)
{
	setIndex(aSrc.getIndex());
	setCode(aSrc.getCode());
	setFreq(aSrc.getFreq());

	return *this;
}
@


1.4
log
@Added MTCtypeRecord::index processing
@
text
@d5 1
a5 1
 * $Id: typerec.cc,v 1.3 1995/11/08 18:34:07 chapman Exp chapman $
d8 3
d23 1
a23 1
static char rcsid []  = "@@(#)$Id: typerec.cc,v 1.3 1995/11/08 18:34:07 chapman Exp chapman $";
d45 3
a47 1
 	for(long bitString=1; freq>=bitString; bitString = bitString << 1)
@


1.3
log
@Converted mstrtype.cc to typerec.cc
@
text
@d5 1
a5 1
 * $Id: mstrtype.cc,v 1.2 1995/11/05 15:54:33 chapman Exp chapman $
d7 4
a10 1
 * $Log: mstrtype.cc,v $
d20 1
a20 1
static char rcsid []  = "@@(#)$Id: mstrtype.cc,v 1.2 1995/11/05 15:54:33 chapman Exp chapman $";
d59 1
a59 1
	anOStream << aSrc.getFreq() << " " <<  aSrc.getCode() << endl;
d67 4
a70 1
	// get frequency
d72 1
a73 1

d163 1
@


1.2
log
@Added bitCount logic
@
text
@d2 1
a2 1
 * Master Type Class
d5 1
a5 1
 * $Id: mstrtype.cc,v 1.1 1995/07/29 17:06:44 markc Exp chapman $
d8 3
d17 1
a17 1
static char rcsid []  = "@@(#)$Id: mstrtype.cc,v 1.1 1995/07/29 17:06:44 markc Exp chapman $";
d24 1
a24 1
#include "../include/mstrtype.h"
d28 1
a28 1
void MTCmstrType::setFreq(long aNum)
d50 1
a50 1
// mstrType stream insertor operator
d52 1
a52 1
ostream & operator<<(ostream & anOStream, const MTCmstrType & aSrc)
d60 1
a60 1
// mstrType stream extractor operator
d62 1
a62 1
istream & operator>>(istream & anIStream, MTCmstrType & aSrc)
d74 1
a74 1
	char buffer[MSTRTYPE_CODE_MAX_LENGTH+1];
d77 1
a77 1
	anIStream.getline(buffer, MSTRTYPE_CODE_MAX_LENGTH);
d99 1
a99 1
int MTCmstrType::isLessThan(const MTCmstrType & aSrc) const
d106 1
a106 1
int MTCmstrType::isEqual(const MTCmstrType & aSrc) const
d113 1
a113 1
BOOL MTCmstrType::operator==(const MTCmstrType & aSrc) const
d120 1
a120 1
BOOL MTCmstrType::operator!=(const MTCmstrType & aSrc) const
d127 1
a127 1
BOOL MTCmstrType::operator<(const MTCmstrType & aSrc)  const
d134 1
a134 1
BOOL MTCmstrType::operator<=(const MTCmstrType & aSrc) const
d141 1
a141 1
BOOL MTCmstrType::operator>(const MTCmstrType & aSrc)  const
d148 1
a148 1
BOOL MTCmstrType::operator>=(const MTCmstrType & aSrc) const
d155 1
a155 1
MTCmstrType & MTCmstrType::operator=(const MTCmstrType &aSrc)
@


1.1
log
@Initial revision
@
text
@d5 1
a5 1
 * $Id$
d7 4
a10 1
 * $Log$
d14 1
a14 1
static char rcsid []  = "@@(#)$Id$";
d23 24
d51 3
a53 1
	anOStream << aSrc.getFreq() << " " << aSrc.getCode() << endl;
d66 1
a66 1
	aSrc.setFreq(tempFreq);
d154 2
a155 2
	code=aSrc.code;
	freq=aSrc.freq;
@
