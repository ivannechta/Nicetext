head	1.17;
access;
symbols;
locks; strict;
comment	@// @;


1.17
date	98.08.18.15.52.27;	author root;	state Exp;
branches;
next	1.16;

1.16
date	98.06.25.20.04.08;	author markc;	state Exp;
branches;
next	1.15;

1.15
date	98.06.25.18.39.40;	author markc;	state Exp;
branches;
next	1.14;

1.14
date	98.06.25.18.03.42;	author markc;	state Exp;
branches;
next	1.13;

1.13
date	98.06.25.17.29.01;	author markc;	state Exp;
branches;
next	1.12;

1.12
date	98.06.24.20.24.21;	author markc;	state Exp;
branches;
next	1.11;

1.11
date	98.06.24.19.44.56;	author markc;	state Exp;
branches;
next	1.10;

1.10
date	98.06.24.19.43.15;	author markc;	state Exp;
branches;
next	1.9;

1.9
date	98.06.23.20.24.33;	author markc;	state Exp;
branches;
next	1.8;

1.8
date	97.08.18.03.05.27;	author markc;	state Exp;
branches;
next	1.7;

1.7
date	97.04.27.16.07.20;	author markc;	state Exp;
branches;
next	1.6;

1.6
date	97.04.27.15.57.25;	author markc;	state Exp;
branches;
next	1.5;

1.5
date	97.03.05.17.41.20;	author markc;	state Exp;
branches;
next	1.4;

1.4
date	97.02.16.06.21.06;	author markc;	state Exp;
branches;
next	1.3;

1.3
date	96.03.21.17.18.56;	author markc;	state Exp;
branches;
next	1.2;

1.2
date	96.02.13.20.25.52;	author markc;	state Exp;
branches;
next	1.1;

1.1
date	96.02.13.19.51.27;	author markc;	state Exp;
branches;
next	;


desc
@initial
@


1.17
log
@changed -d to -p
@
text
@/*
 * List the words from stdin a line at a time to stdout
 * Copyright (c) Mark T. Chapman 1995
 *
 * $Id: listword.cc,v 1.16 1998/06/25 20:04:08 markc Exp root $
 *
 * $Log: listword.cc,v $
 * Revision 1.16  1998/06/25 20:04:08  markc
 * *** empty log message ***
 *
 * Revision 1.15  1998/06/25 18:39:40  markc
 * excludeThisWord() TRUE/FALSE FIXED
 *
 * Revision 1.14  1998/06/25 18:03:42  markc
 * excludeNonWords fixed
 *
 * Revision 1.13  1998/06/25 17:29:01  markc
 * added isprint() to excludeNonWords
 *
 * Revision 1.12  1998/06/24 20:24:21  markc
 * added -u, -q, -x
 *
 * Revision 1.11  1998/06/24 19:44:56  markc
 * 100000 instead of 10000
 *
 * Revision 1.10  1998/06/24 19:43:15  markc
 * 10000 instead of 1000
 *
 * Revision 1.9  1998/06/23 20:24:33  markc
 * added -d option
 *
 * Revision 1.8  1997/08/18 03:05:27  markc
 * Changed yy* to zz* to avoid multiple symbols for LEX parsers
 *
 * Revision 1.7  1997/04/27 16:07:20  markc
 * added words read to output
 *
 * Revision 1.6  1997/04/27 15:57:25  markc
 * Added -l for lowercase
 *
 * Revision 1.5  1997/03/05 17:41:20  markc
 * Added static char rcsid []  = "@@(#)$Id: listword.cc,v 1.16 1998/06/25 20:04:08 markc Exp root $";
 *
 * Revision 1.4  1997/02/16 06:21:06  markc
 * Added -c parameter to count word frequency
 *
 * Revision 1.3  1996/03/21 17:18:56  markc
 * program name changes and messages (minor)
 *
 * Revision 1.2  1996/02/13 20:25:52  markc
 * sort and output unique ones
 *
// Revision 1.1  1996/02/13  19:51:27  markc
// Initial revision
//
 *
 */

static char rcsid []  = "@@(#)$Id: listword.cc,v 1.16 1998/06/25 20:04:08 markc Exp root $";

#include <stdio.h>
#include <iostream.h>
#include <fstream.h>
#include <stdlib.h>
#include "../../mtc++/include/MTC++.h"
#include "../../mtc++/include/errormsg.h"
#include "../../mtc++/include/mstring.h"
#include "../../mtc++/include/rbt.h"
#include "../include/lexword.h"

int zzlex();
extern char *zztext;

BOOL printFreq=FALSE;

void dump(MTCstring *);
void dumpFreq(MTCstring *, long);
void usage();
BOOL excludeThisWord(const MTCstring &);

int main(int argc, char * argv[])
{
	BOOL lowercase=FALSE;
	BOOL dumpMode=FALSE;
	BOOL excludeNonWords=FALSE;
	long updateFreq=100000;
	char ch;

	while ((ch = getopt(argc, argv, "chlpxu:q")) != EOF)
        {
                switch(ch) 
                {
			case 'u':
				updateFreq = atol(optarg);
				break;
			case 'q':
				updateFreq = 0;
				break;
			case 'x':
				excludeNonWords = TRUE;
				break;
                        case 'c':
				printFreq=TRUE;
				break;
			case 'l':
				lowercase=TRUE;
				break;
			case 'p':
				dumpMode=TRUE;
				break;
			case 'h':
				usage();
				return 0;
			default:
				usage();
				return -1;
		}
	}

	argc -= optind;
        argv += optind;

	MTCRBT <MTCstring> * stringList;

	if (printFreq==TRUE)
	{
		MTCRBTFreq <MTCstring> * freqList = new MTCRBTFreq <MTCstring>;
	
		if (freqList==NULL)
		{
			errorMsg(EMT_ABORT, "I could not allocated the MTCRBTFreq() object -- not enough RAM?", "main()");
			return -2;
		}

		stringList=freqList;
	}
	else
	{
		stringList = new MTCRBT <MTCstring>;

		if (stringList==NULL)
		{
			errorMsg(EMT_ABORT, "I could not allocated the MTCRBTFreq() object -- not enough RAM?", "main()");
			return -2;
		}
	}

	int retval;
	long count=0;
	
	cerr << "listword started" << endl;
	cerr << "\tprinting options..." << endl;

	if (printFreq==TRUE)
	{
		cerr << "\t\tcount frequency option is ON" << endl;
	}
	else
	{
		cerr << "\t\tcount frequency option is OFF" << endl;
	}

	if (lowercase==TRUE)
	{
		cerr << "\t\tconverting all words to lowercase" << endl;
	}

	if (excludeNonWords==TRUE)
	{
		cerr << "\t\texcluding non-words (numbers, punct, etc.)" << endl;
	}

	if (dumpMode==TRUE)
	{
		cerr << "\t\tdumping words as they are read" << endl;
	}

	if (updateFreq)
	{
		cerr << "\t\tsending progress updates every " << updateFreq << " words" << endl;
	}
	else
	{
		cerr << "\t\tnot sending progress updates" << endl;
	}

	cerr << "\tparsing words from stdin..." << endl;

        for(;;)
        {
                retval=zzlex();

                if (zztext[0]=='\0')
                        break;

                switch (retval)
                {
		case END_OF_WORD:
			{
				MTCstring s(zztext);

				if (lowercase==TRUE)
				{
					s.toLower();
				}

				count++;

				if (dumpMode==TRUE)
				{
					if ((excludeNonWords==FALSE)||(excludeThisWord(s)==FALSE))
					{
						cout << s << endl;
					}
				}
				else
				{
					if ((excludeNonWords==FALSE)||(excludeThisWord(s)==FALSE))
					{
						stringList->add(s);
					}

					if ((updateFreq!=0)
					&&  ((count % updateFreq)==0))
					{
						cerr << "\rlw: " << stringList->getCount() << '/' << count << "             \r";
					}
				}
			}
			break;
                default:
                        break;
                }
        }

	cerr << "words read: " << count << "         " << endl;                                                                                            
	if (dumpMode==FALSE)
	{
		cerr << "\tdumping " << stringList->getCount() << " unique words to stdout..." << endl;

		if (printFreq==TRUE)
		{
			((MTCRBTFreq <MTCstring> *)stringList)->forEachFreq(dumpFreq);
		}
		else
		{
			stringList->forEach(dump);
		}
	}

	cerr << "That's All Folks!" << endl;

	if (stringList!=NULL)
	{
		delete stringList;
		stringList=NULL;
	}

	return 0;
}

void dump(MTCstring *s)
{
	cout << *s << endl;
}

void dumpFreq(MTCstring *s, long freq)
{
	cout << *s << ' ' << freq << endl;
}

BOOL excludeThisWord(const MTCstring &aString)
{
	for(int i=0; i<aString.length(); i++)
	{
		if ((!isalpha(aString.c_str()[i]))&&(aString.c_str()[i]!='\''))
		{
			return TRUE;
		}
	}

	return FALSE;
}

void usage()
{
	cerr << "Usage: listword [-c] [-l] [-p] [-x] [[-u updateFreq] | [-q]]" << endl;
	cerr << "\t[-c] Count Words and Print Frequency on Output" << endl;
	cerr << "\t[-l] Convert all words to lower case" << endl;
	cerr << "\t[-p] Dump each word out as it is read" << endl;
	cerr << "\t[-q] Do not send updates to stderr (sames as -u 0)" << endl;
	cerr << "\t[-u] Send updates to stderr every updateFreq words" << endl;
	cerr << "\t[-x] Exclude non-words (numbers, punct, etc.)" << endl;
}
@


1.16
log
@*** empty log message ***
@
text
@d5 1
a5 1
 * $Id: listword.cc,v 1.15 1998/06/25 18:39:40 markc Exp markc $
d8 3
d42 1
a42 1
 * Added static char rcsid []  = "@@(#)$Id: listword.cc,v 1.15 1998/06/25 18:39:40 markc Exp markc $";
d59 1
a59 1
static char rcsid []  = "@@(#)$Id: listword.cc,v 1.15 1998/06/25 18:39:40 markc Exp markc $";
d89 1
a89 1
	while ((ch = getopt(argc, argv, "chldxu:q")) != EOF)
d108 1
a108 1
			case 'd':
d287 1
a287 1
	cerr << "Usage: listword [-c] [-l] [-x] [[-u updateFreq] | [-q]]" << endl;
d290 1
a290 1
	cerr << "\t[-d] Dump each word out as it is read" << endl;
@


1.15
log
@excludeThisWord() TRUE/FALSE FIXED
@
text
@d5 1
a5 1
 * $Id: listword.cc,v 1.14 1998/06/25 18:03:42 markc Exp markc $
d8 3
d39 1
a39 1
 * Added static char rcsid []  = "@@(#)$Id: listword.cc,v 1.14 1998/06/25 18:03:42 markc Exp markc $";
d56 1
a56 1
static char rcsid []  = "@@(#)$Id: listword.cc,v 1.14 1998/06/25 18:03:42 markc Exp markc $";
d273 1
a273 1
		if (!isalpha(aString.c_str()[i]))
@


1.14
log
@excludeNonWords fixed
@
text
@d5 1
a5 1
 * $Id: listword.cc,v 1.13 1998/06/25 17:29:01 markc Exp markc $
d8 3
d36 1
a36 1
 * Added static char rcsid []  = "@@(#)$Id: listword.cc,v 1.13 1998/06/25 17:29:01 markc Exp markc $";
d53 1
a53 1
static char rcsid []  = "@@(#)$Id: listword.cc,v 1.13 1998/06/25 17:29:01 markc Exp markc $";
d272 1
a272 1
			return FALSE;
d276 1
a276 1
	return TRUE;
@


1.13
log
@added isprint() to excludeNumbers
@
text
@d5 1
a5 1
 * $Id: listword.cc,v 1.12 1998/06/24 20:24:21 markc Exp markc $
d8 3
d33 1
a33 1
 * Added static char rcsid []  = "@@(#)$Id: listword.cc,v 1.12 1998/06/24 20:24:21 markc Exp markc $";
d50 1
a50 1
static char rcsid []  = "@@(#)$Id: listword.cc,v 1.12 1998/06/24 20:24:21 markc Exp markc $";
d70 1
d76 1
a76 1
	BOOL excludeNumbers=FALSE;
d91 1
a91 1
				excludeNumbers = TRUE;
d159 1
a159 1
	if (excludeNumbers==TRUE)
d161 1
a161 1
		cerr << "\t\texcluding words that start with [0-9] or '-' or non-printable" << endl;
d198 2
d202 1
a202 1
					if (!((excludeNumbers==TRUE)&&(s.length()>0)&&((s.c_str()[0]>='0')&&(s.c_str()[0]<='9'))||(s.c_str()[0]=='-'))&&(!isprint(s.c_str()[0])))
a204 1
						count++;
d209 1
a209 1
					if (!((excludeNumbers==TRUE)&&(s.length()>0)&&((s.c_str()[0]>='0')&&(s.c_str()[0]<='9'))||(s.c_str()[0]=='-'))&&(!isprint(s.c_str()[0])))
a211 1
						count++;
d263 13
d284 1
a284 1
	cerr << "\t[-x] Exclude words that start with digits, minus sign, or non-printable" << endl;
@


1.12
log
@added -u, -q, -x
@
text
@d5 1
a5 1
 * $Id: listword.cc,v 1.11 1998/06/24 19:44:56 markc Exp markc $
d8 3
d30 1
a30 1
 * Added static char rcsid []  = "@@(#)$Id: listword.cc,v 1.11 1998/06/24 19:44:56 markc Exp markc $";
d47 1
a47 1
static char rcsid []  = "@@(#)$Id: listword.cc,v 1.11 1998/06/24 19:44:56 markc Exp markc $";
d157 1
a157 1
		cerr << "\t\texcluding words that start with [0-9] or '-'" << endl;
d196 1
a196 1
					if (!((excludeNumbers==TRUE)&&(s.length()>0)&&((s.c_str()[0]>='0')&&(s.c_str()[0]<='9'))||(s.c_str()[0]=='-')))
d204 1
a204 1
					if (!((excludeNumbers==TRUE)&&(s.length()>0)&&(s.c_str()[0]>='0')&&(s.c_str()[0]<='9')))
d267 1
a267 1
	cerr << "\t[-x] Exclude words that start with digits or minus sign" << endl;
@


1.11
log
@100000 instead of 10000
@
text
@d5 1
a5 1
 * $Id: listword.cc,v 1.10 1998/06/24 19:43:15 markc Exp markc $
d8 3
d27 1
a27 1
 * Added static char rcsid []  = "@@(#)$Id: listword.cc,v 1.10 1998/06/24 19:43:15 markc Exp markc $";
d44 1
a44 1
static char rcsid []  = "@@(#)$Id: listword.cc,v 1.10 1998/06/24 19:43:15 markc Exp markc $";
d69 2
d73 1
a73 1
	while ((ch = getopt(argc, argv, "chld")) != EOF)
d77 9
d152 5
d162 9
d193 5
a197 1
					cout << s << endl;
d201 8
a208 3
					stringList->add(s);
	
					if ((++count%100000)==0)
d258 1
a258 1
	cerr << "Usage: listword [-c] [-l]" << endl;
d262 3
@


1.10
log
@10000 instead of 1000
@
text
@d5 1
a5 1
 * $Id: listword.cc,v 1.9 1998/06/23 20:24:33 markc Exp markc $
d8 3
d24 1
a24 1
 * Added static char rcsid []  = "@@(#)$Id: listword.cc,v 1.9 1998/06/23 20:24:33 markc Exp markc $";
d41 1
a41 1
static char rcsid []  = "@@(#)$Id: listword.cc,v 1.9 1998/06/23 20:24:33 markc Exp markc $";
d171 1
a171 1
					if ((++count%10000)==0)
@


1.9
log
@added -d option
@
text
@d5 1
a5 1
 * $Id: listword.cc,v 1.8 1997/08/18 03:05:27 markc Exp markc $
d8 3
d21 1
a21 1
 * Added static char rcsid []  = "@@(#)$Id: listword.cc,v 1.8 1997/08/18 03:05:27 markc Exp markc $";
d38 1
a38 1
static char rcsid []  = "@@(#)$Id: listword.cc,v 1.8 1997/08/18 03:05:27 markc Exp markc $";
d168 1
a168 1
					if ((++count%1000)==0)
@


1.8
log
@Changed yy* to zz* to avoid multiple symbols for LEX parsers
@
text
@d5 1
a5 1
 * $Id: listword.cc,v 1.7 1997/04/27 16:07:20 markc Exp markc $
d8 3
d18 1
a18 1
 * Added static char rcsid []  = "@@(#)$Id: listword.cc,v 1.7 1997/04/27 16:07:20 markc Exp markc $";
d35 1
a35 1
static char rcsid []  = "@@(#)$Id: listword.cc,v 1.7 1997/04/27 16:07:20 markc Exp markc $";
d59 1
d62 1
a62 1
	while ((ch = getopt(argc, argv, "chl")) != EOF)
d72 3
d132 5
d150 1
a150 1
			MTCstring s(zztext);
d152 18
a169 10
			if (lowercase==TRUE)
			{
				s.toLower();
			}

			stringList->add(s);
			if ((++count%1000)==0)
			{
				cerr << "\rlw: " << stringList->getCount() << '/' << count << "             \r";
			}
d178 3
a180 1
	cerr << "\tdumping " << stringList->getCount() << " unique words to stdout..." << endl;
d182 8
a189 7
	if (printFreq==TRUE)
	{
		((MTCRBTFreq <MTCstring> *)stringList)->forEachFreq(dumpFreq);
	}
	else
	{
		stringList->forEach(dump);
d218 1
@


1.7
log
@added words read to output
@
text
@d5 1
a5 1
 * $Id: listword.cc,v 1.6 1997/04/27 15:57:25 markc Exp markc $
d8 3
d15 1
a15 1
 * Added static char rcsid []  = "@@(#)$Id: listword.cc,v 1.6 1997/04/27 15:57:25 markc Exp markc $";
d32 1
a32 1
static char rcsid []  = "@@(#)$Id: listword.cc,v 1.6 1997/04/27 15:57:25 markc Exp markc $";
d44 2
a45 2
int yylex();
extern char *yytext;
d129 1
a129 1
                retval=yylex();
d131 1
a131 1
                if (yytext[0]=='\0')
d138 1
a138 1
			MTCstring s(yytext);
@


1.6
log
@Added -l for lowercase
@
text
@d5 1
a5 1
 * $Id: listword.cc,v 1.5 1997/03/05 17:41:20 markc Exp markc $
d8 3
d12 1
a12 1
 * Added static char rcsid []  = "@@(#)$Id$";
d29 1
a29 1
static char rcsid []  = "@@(#)$Id: listword.cc,v 1.5 1997/03/05 17:41:20 markc Exp markc $";
d154 2
a155 1
	cerr << "\tdumping " << stringList->getCount() << " words to stdout..." << endl;
@


1.5
log
@Added static char rcsid []  = "@@(#)$Id$";
@
text
@d5 1
a5 1
 * $Id: listword.cc,v 1.4 1997/02/16 06:21:06 markc Exp markc $
d8 3
d26 1
a26 1
static char rcsid []  = "@@(#)$Id$";
d31 1
d49 19
a67 18
	if (argc==2)
	{
		if (strcmp(argv[1], "-c")==0)
		{
			printFreq=TRUE;
		}
		else
		{
			usage();
			return -1;
		}
	}
	else
	{
		if (argc!=1)
		{
			usage();
			return -1;
d70 3
d103 1
a103 1
	cerr << "\tparsing words from stdin..." << endl;
d107 1
a107 1
		cerr << "\t(count frequency option is ON)" << endl;
d111 6
a116 1
		cerr << "\t(count frequency option is OFF)" << endl;
d119 2
d133 6
d185 1
a185 1
	cerr << "Usage: listword" << endl;
d187 1
@


1.4
log
@Added -c parameter to count word frequency
@
text
@d5 1
a5 1
 * $Id: listword.cc,v 1.3 1996/03/21 17:18:56 markc Exp markc $
d8 3
d22 2
@


1.3
log
@program name changes and messages (minor)
@
text
@d5 1
a5 1
 * $Id: listword.cc,v 1.2 1996/02/13 20:25:52 markc Exp markc $
d8 3
d32 2
d35 1
d40 24
a63 1
	if (argc!=1)
d65 9
a73 2
		usage();
		return 0;
d75 3
d79 6
a84 1
	MTCRBT <MTCstring> stringList;
d92 9
d113 1
a113 1
			stringList.add(s);
d116 1
a116 1
				cerr << "\rlw: " << stringList.getCount() << '/' << count << "             \r";
d125 1
a125 1
	cerr << "\tdumping " << stringList.getCount() << " words to stdout..." << endl;
d127 8
a134 1
	stringList.forEach(dump);
d138 6
d152 5
d160 1
@


1.2
log
@sort and output unique ones
@
text
@d5 1
a5 1
 * $Id: listword.cc,v 1.1 1996/02/13 19:51:27 markc Exp markc $
d8 3
d30 1
d32 1
a32 1
int main()
d34 6
d45 2
a46 1
	cerr << "Parsing words from stdin..." << endl;
d72 1
a72 1
	cerr << "Dumping " << stringList.getCount() << " words to stdout..." << endl;
d84 5
@


1.1
log
@Initial revision
@
text
@d5 1
a5 1
 * $Id$
d7 4
a10 1
 * $Log$
d15 6
d26 2
d30 2
d33 1
d35 2
d47 8
a54 1
			printf("%s\n", yytext);
d60 7
d70 4
@
